THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>isByteString
16 April 2012 10:09:43 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 0
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>>isByteString
		resumeValue: 	nil
	Receiver's instance variables: 
0

ByteString(String)>>compare:with:collated:
	Receiver: '-304'
	Arguments and temporary variables: 
		string1: 	'-304'
		string2: 	0
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc...
	Receiver's instance variables: 
'-304'

ByteString(String)>><
	Receiver: '-304'
	Arguments and temporary variables: 
		aString: 	0
	Receiver's instance variables: 
'-304'

HMIwidget>>xPos
	Receiver: a HMIwidget
	Arguments and temporary variables: 

	Receiver's instance variables: 
		xPos: 	'-304'
		yPos: 	'147'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '(HMIelement elements at: 2) widget xPos'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(186646528)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ (HMIelement elements at: 2) widget xPos
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(227540992)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '(HMIelement elements at: 2) widget xPos'
		requestor: 	a TextMorphForEditView(186646528)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | self afterSelectionInsertAndSelect: result printString]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	113
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#printIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		return: 	[:val | ^ val]
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17181637) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '(HMIelement elements at: 2) widget xPos'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17181637) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17181637) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17181637) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(186646528)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(186646528)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17181637) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(232259584)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17181637) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17181637) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(186646528)
	Receiver's instance variables: 
		timeStamp: 	17180951
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	388@41
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	112


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17181637) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17181637) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(186646528)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	942@338 corner: 958@354
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(282591232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[941@336 942@338 mouseMove 17176707 nil]
		targetOffset: 	176@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17176707 942 338 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1022361600) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1022361600) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(186646528)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	942@338 corner: 958@354
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(282591232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[941@336 942@338 mouseMove 17176707 nil]
		targetOffset: 	176@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17176707 942 338 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(186646528)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	942@338 corner: 958@354
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(282591232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[941@336 942@338 mouseMove 17176707 nil]
		targetOffset: 	176@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17176707 942 338 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	942@338 corner: 958@354
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(282591232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[941@336 942@338 mouseMove 17176707 nil]
		targetOffset: 	176@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17176707 942 338 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	942@338 corner: 958@354
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(282591232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[941@336 942@338 mouseMove 17176707 nil]
		targetOffset: 	176@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17176707 942 338 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 17180951 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	942@338 corner: 958@354
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(282591232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[941@336 942@338 mouseMove 17176707 nil]
		targetOffset: 	176@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17176707 942 338 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #isByteString
ByteString(String)>>compare:with:collated:
ByteString(String)>><
HMIwidget>>xPos
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>isByteString
16 April 2012 10:09:50 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 0
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>>isByteString
		resumeValue: 	nil
	Receiver's instance variables: 
0

ByteString(String)>>compare:with:collated:
	Receiver: '-304'
	Arguments and temporary variables: 
		string1: 	'-304'
		string2: 	0
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc...
	Receiver's instance variables: 
'-304'

ByteString(String)>><
	Receiver: '-304'
	Arguments and temporary variables: 
		aString: 	0
	Receiver's instance variables: 
'-304'

HMIwidget>>xPos
	Receiver: a HMIwidget
	Arguments and temporary variables: 

	Receiver's instance variables: 
		xPos: 	'-304'
		yPos: 	'147'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '(HMIelement elements at: 2) widget xPos'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(186646528)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ (HMIelement elements at: 2) widget xPos
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(807403520)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '(HMIelement elements at: 2) widget xPos'
		requestor: 	a TextMorphForEditView(186646528)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | self afterSelectionInsertAndSelect: result printString]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	113
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#printIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		return: 	[:val | ^ val]
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17189197) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '(HMIelement elements at: 2) widget xPos'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17189197) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17189197) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17189197) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(186646528)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(186646528)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17189197) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(232259584)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17189197) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17189197) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(186646528)
	Receiver's instance variables: 
		timeStamp: 	17188607
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	317@26
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	112


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17189197) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17189197) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(186646528)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	871@323 corner: 887@339
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(255328256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[870@324 871@323 mouseMove 17187567 nil]
		targetOffset: 	261@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17187567 870 323 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(961544192) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(961544192) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(186646528)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	871@323 corner: 887@339
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(255328256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[870@324 871@323 mouseMove 17187567 nil]
		targetOffset: 	261@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17187567 870 323 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(186646528)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	871@323 corner: 887@339
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(255328256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[870@324 871@323 mouseMove 17187567 nil]
		targetOffset: 	261@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17187567 870 323 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	871@323 corner: 887@339
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(255328256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[870@324 871@323 mouseMove 17187567 nil]
		targetOffset: 	261@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17187567 870 323 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	871@323 corner: 887@339
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(255328256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[870@324 871@323 mouseMove 17187567 nil]
		targetOffset: 	261@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17187567 870 323 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 17188607 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	871@323 corner: 887@339
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(255328256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[870@324 871@323 mouseMove 17187567 nil]
		targetOffset: 	261@12
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17187567 870 323 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #isByteString
ByteString(String)>>compare:with:collated:
ByteString(String)>><
HMIwidget>>xPos
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>isByteString
16 April 2012 10:10:28 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 0
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>>isByteString
		resumeValue: 	nil
	Receiver's instance variables: 
0

ByteString(String)>>compare:with:collated:
	Receiver: '-304'
	Arguments and temporary variables: 
		string1: 	'-304'
		string2: 	0
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc...
	Receiver's instance variables: 
'-304'

ByteString(String)>><
	Receiver: '-304'
	Arguments and temporary variables: 
		aString: 	0
	Receiver's instance variables: 
'-304'

HMIwidget>>xPos
	Receiver: a HMIwidget
	Arguments and temporary variables: 

	Receiver's instance variables: 
		xPos: 	'-304'
		yPos: 	'147'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '(HMIelement elements at: 2) widget xPos'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(186646528)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ (HMIelement elements at: 2) widget xPos
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(540803072)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '(HMIelement elements at: 2) widget xPos'
		requestor: 	a TextMorphForEditView(186646528)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(186646528)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17227163) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '(HMIelement elements at: 2) widget xPos'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17227163) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17227163) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17227163) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(186646528)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(186646528)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17227163) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(232259584)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17227163) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17227163) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(186646528)
	Receiver's instance variables: 
		timeStamp: 	17226553
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	257@13
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17227163) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(186646528)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(285474816)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (266862592) [other:  (blinkStart -> 17227163) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(HMIelement elements at: 2) widget xPos'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(232259584)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(186646528)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	811@310 corner: 827@326
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1062207488)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[811@311 811@310 mouseMove 17225347 nil]
		targetOffset: 	271@47
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17225347 811 310 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(749469696) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(749469696) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(186646528)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	811@310 corner: 827@326
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1062207488)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[811@311 811@310 mouseMove 17225347 nil]
		targetOffset: 	271@47
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17225347 811 310 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(186646528)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	811@310 corner: 827@326
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1062207488)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[811@311 811@310 mouseMove 17225347 nil]
		targetOffset: 	271@47
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17225347 811 310 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	811@310 corner: 827@326
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1062207488)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[811@311 811@310 mouseMove 17225347 nil]
		targetOffset: 	271@47
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17225347 811 310 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	811@310 corner: 827@326
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1062207488)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[811@311 811@310 mouseMove 17225347 nil]
		targetOffset: 	271@47
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 17225347 811 310 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #isByteString
ByteString(String)>>compare:with:collated:
ByteString(String)>><
HMIwidget>>xPos
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
21 April 2012 2:37:37 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

[caught := true.
	self wait.
	blockValue := mutuallyExcludedBlock value] in Semaphore>>critical:
	Receiver: a Semaphore()
	Arguments and temporary variables: 
		mutuallyExcludedBlock: 	[owner := activeProcess.
	aBlock
		ensure: [owner := nil...etc...
		blockValue: 	#(nil true)
		caught: 	a Semaphore()
	Receiver's instance variables: 
		firstLink: 	nil
		lastLink: 	nil
		excessSignals: 	0


BlockClosure>>ensure:
	Receiver: [caught := true.
	self wait.
	blockValue := mutuallyExcludedBlock value]
	Arguments and temporary variables: 
		aBlock: 	[caught
		ifTrue: [self signal]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Semaphore>>critical:
		startpc: 	42
		numArgs: 	0


Semaphore>>critical:
	Receiver: a Semaphore()
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		firstLink: 	nil
		lastLink: 	nil
		excessSignals: 	0


Mutex>>critical:
	Receiver: a Mutex
	Arguments and temporary variables: 
		aBlock: 	[sockets
		remove: ws
		ifAbsent: []]
		activeProcess: 	a Process in [caught := true.
	self wait.
	blockValue := mutuall...etc...
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		owner: 	a Process in [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore wa...etc...


[Transcript cr; show: 'Closing ' , ws.
	mutex
		critical: [sockets
				remove: ws
				ifAbsent: []]] in [:req | 
| ws |
ws := req asWebSocket.
	ws timeout: 1000.
	Transcript cr; show: 'Client connected: ' , ws.
	ws send: 'You connected'.
	ws
		onMessage: [:data | self
				processMessage: data
				withMutex: mutex
				fromSockets: sockets].
	ws
		onClose: [Transcript cr; show: 'Closing ' , ws.
			mutex
				critical: [sockets
						remove: ws
						ifAbsent: []]].
	ws
		onError: [:ex | nil].
	mutex
		critical: [sockets add: ws.
			ws send: 'You added to client list'].
	ws run] in WebHMIServer>>startServerOnPort:
	Receiver: a WebHMIServer
	Arguments and temporary variables: 
		mutex: 	a Mutex
		sockets: 	an OrderedCollection(WebSocket07(192.168.7.207:59039) WebSocket07(192....etc...
		ws: 	WebSocket07(127.0.0.1:49969)
	Receiver's instance variables: 
		elements: 	an OrderedCollection(a HMIelement a HMIelement a HMIelement)
		element: 	nil


BlockClosure>>valueWithPossibleArgs:
	Receiver: [Transcript cr; show: 'Closing ' , ws.
	mutex
		critical: [sockets
				remove: ws
				ifAb...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(WebSocket07(127.0.0.1:49969))
	Receiver's instance variables: 
		outerContext: 	[:req | 
| ws |
ws := req asWebSocket.
	ws timeout: 1000.
	Transc...etc...
		startpc: 	219
		numArgs: 	0


WebSocket07(WebSocket)>>handle:arguments:ifAbsent:
	Receiver: WebSocket07(127.0.0.1:49969)
	Arguments and temporary variables: 
		selector: 	'close'
		argList: 	an Array(WebSocket07(127.0.0.1:49969))
		aBlock: 	[]
	Receiver's instance variables: 
		name: 	'127.0.0.1:49969'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[Transcript cr; show: 'Closing ' , ws.
	mutex
	...etc...
		frameType: 	1
		frameData: 	#(#[64 99 104 97 110 103 101 80 111 115 32 68 66 115 101 114 118 101...etc...
		closing: 	false
		masking: 	true


WebSocket07(WebSocket)>>handle:arguments:
	Receiver: WebSocket07(127.0.0.1:49969)
	Arguments and temporary variables: 
		selector: 	'close'
		argList: 	an Array(WebSocket07(127.0.0.1:49969))
	Receiver's instance variables: 
		name: 	'127.0.0.1:49969'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[Transcript cr; show: 'Closing ' , ws.
	mutex
	...etc...
		frameType: 	1
		frameData: 	#(#[64 99 104 97 110 103 101 80 111 115 32 68 66 115 101 114 118 101...etc...
		closing: 	false
		masking: 	true


WebSocket07(WebSocket)>>handleClose
	Receiver: WebSocket07(127.0.0.1:49969)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'127.0.0.1:49969'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[Transcript cr; show: 'Closing ' , ws.
	mutex
	...etc...
		frameType: 	1
		frameData: 	#(#[64 99 104 97 110 103 101 80 111 115 32 68 66 115 101 114 118 101...etc...
		closing: 	false
		masking: 	true


[[stream socket destroy]
		on: Error
		do: [:ex | nil].
	self handleClose] in WebSocket07>>run
	Receiver: WebSocket07(127.0.0.1:49969)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'127.0.0.1:49969'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[Transcript cr; show: 'Closing ' , ws.
	mutex
	...etc...
		frameType: 	1
		frameData: 	#(#[64 99 104 97 110 103 101 80 111 115 32 68 66 115 101 114 118 101...etc...
		closing: 	false
		masking: 	true


MethodContext(ContextPart)>>resume:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		value: 	a WebServer
		ctxt: 	BlockClosure>>ensure:
		unwindBlock: 	[[stream socket destroy]
		on: Error
		do: [:ex | nil].
	self hand...etc...
	Receiver's instance variables: 
		sender: 	BlockClosure>>ensure:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(144703488)")
		closureOrNil: 	nil
		receiver: 	[chain := thisContext sender cut: ctxt.
	ctxt jump]


BlockClosure>>ensure:
	Receiver: [[[stream isConnected]
		whileTrue: [self readFrame].
	nil]
		on: Error
		do: [:ex | self ...etc...
	Arguments and temporary variables: 
		aBlock: 	[[stream socket destroy]
		on: Error
		do: [:ex | nil].
	self handleClo...etc...
		complete: 	true
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	WebSocket07>>run
		startpc: 	57
		numArgs: 	0


WebSocket07>>run
	Receiver: WebSocket07(127.0.0.1:49969)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'127.0.0.1:49969'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[Transcript cr; show: 'Closing ' , ws.
	mutex
	...etc...
		frameType: 	1
		frameData: 	#(#[64 99 104 97 110 103 101 80 111 115 32 68 66 115 101 114 118 101...etc...
		closing: 	false
		masking: 	true


[:req | 
| ws |
ws := req asWebSocket.
	ws timeout: 1000.
	Transcript cr; show: 'Client connected: ' , ws.
	ws send: 'You connected'.
	ws
		onMessage: [:data | self
				processMessage: data
				withMutex: mutex
				fromSockets: sockets].
	ws
		onClose: [Transcript cr; show: 'Closing ' , ws.
			mutex
				critical: [sockets
						remove: ws
						ifAbsent: []]].
	ws
		onError: [:ex | nil].
	mutex
		critical: [sockets add: ws.
			ws send: 'You added to client list'].
	ws run] in WebHMIServer>>startServerOnPort:
	Receiver: a WebHMIServer
	Arguments and temporary variables: 
		mutex: 	WebRequest(GET /broadcast HTTP/1.1

upgrade: websocket

connection: Upgr...etc...
		sockets: 	a Mutex
		req: 	an OrderedCollection(WebSocket07(192.168.7.207:59039) WebSocket07(192.168....etc...
		ws: 	WebSocket07(127.0.0.1:49969)
	Receiver's instance variables: 
		elements: 	an OrderedCollection(a HMIelement a HMIelement a HMIelement)
		element: 	nil


WebServer>>invokeAction:request:
	Receiver: a WebServer
	Arguments and temporary variables: 
		action: 	[:req | 
| ws |
ws := req asWebSocket.
	ws timeout: 1000.
	Transcript c...etc...
		request: 	WebRequest(GET /broadcast HTTP/1.1

upgrade: websocket

connection: Up...etc...
	Receiver's instance variables: 
		listenerSocket: 	a Socket[waitingForConnection]
		listenerProcess: 	nil
		interface: 	nil
		port: 	9898
		mutex: 	a Mutex
		connections: 	an IdentitySet(a Process in nil a Process in [self schedule.
	bein...etc...
		entryPoints: 	a Dictionary('/broadcast'->an Array(#('GET' 'POST') [:req | 
| ws ...etc...
		vault: 	a Dictionary()
		logAction: 	[:aString | Transcript cr; show: aString]
		nonceCache: 	a Dictionary()
		sessions: 	a Dictionary()
		serverString: 	nil
		errorHandler: 	nil
		accessLog: 	nil
		certName: 	nil
		siteUrl: 	nil


[self
		invokeAction: (action at: 2)
		request: request] in WebServer>>dispatchRequest:url:
	Receiver: a WebServer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		listenerSocket: 	a Socket[waitingForConnection]
		listenerProcess: 	nil
		interface: 	nil
		port: 	9898
		mutex: 	a Mutex
		connections: 	an IdentitySet(a Process in nil a Process in [self schedule.
	bein...etc...
		entryPoints: 	a Dictionary('/broadcast'->an Array(#('GET' 'POST') [:req | 
| ws ...etc...
		vault: 	a Dictionary()
		logAction: 	[:aString | Transcript cr; show: aString]
		nonceCache: 	a Dictionary()
		sessions: 	a Dictionary()
		serverString: 	nil
		errorHandler: 	nil
		accessLog: 	nil
		certName: 	nil
		siteUrl: 	nil


BlockClosure>>on:do:
	Receiver: [self
		invokeAction: (action at: 2)
		request: request]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | errorHandler
		ifNil: [self handleError: ex request: requ...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	WebServer>>dispatchRequest:url:
		startpc: 	333
		numArgs: 	0


WebServer>>dispatchRequest:url:
	Receiver: a WebServer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		listenerSocket: 	a Socket[waitingForConnection]
		listenerProcess: 	nil
		interface: 	nil
		port: 	9898
		mutex: 	a Mutex
		connections: 	an IdentitySet(a Process in nil a Process in [self schedule.
	bein...etc...
		entryPoints: 	a Dictionary('/broadcast'->an Array(#('GET' 'POST') [:req | 
| ws ...etc...
		vault: 	a Dictionary()
		logAction: 	[:aString | Transcript cr; show: aString]
		nonceCache: 	a Dictionary()
		sessions: 	a Dictionary()
		serverString: 	nil
		errorHandler: 	nil
		accessLog: 	nil
		certName: 	nil
		siteUrl: 	nil


WebServer>>dispatchRequest:
	Receiver: a WebServer
	Arguments and temporary variables: 
		request: 	WebRequest(GET /broadcast HTTP/1.1

upgrade: websocket

connection: Up...etc...
	Receiver's instance variables: 
		listenerSocket: 	a Socket[waitingForConnection]
		listenerProcess: 	nil
		interface: 	nil
		port: 	9898
		mutex: 	a Mutex
		connections: 	an IdentitySet(a Process in nil a Process in [self schedule.
	bein...etc...
		entryPoints: 	a Dictionary('/broadcast'->an Array(#('GET' 'POST') [:req | 
| ws ...etc...
		vault: 	a Dictionary()
		logAction: 	[:aString | Transcript cr; show: aString]
		nonceCache: 	a Dictionary()
		sessions: 	a Dictionary()
		serverString: 	nil
		errorHandler: 	nil
		accessLog: 	nil
		certName: 	nil
		siteUrl: 	nil


[| ssl |
certName
		ifNil: [stream := SocketStream on: aSocket]
		ifNotNil: [ssl := Smalltalk
						at: #SqueakSSL
						ifAbsent: [self error: 'SqueakSSL not installed'].
			stream := ssl secureSocketStream on: aSocket.
			[stream sslAccept: certName]
				on: Error
				do: [^ stream destroy]].
	[aSocket isConnected]
		whileTrue: [stream peek
				ifNil: [^ aSocket destroy].
			request := self newRequest.
			[request readFrom: stream]
				on: Error
				do: [:ex | 
					(ex isKindOf: NetworkError)
						ifFalse: [[request send400Response]
								on: Error
								do: [:ignore | nil]].
					^ aSocket destroy].
			self dispatchRequest: request].
	nil] in WebServer>>handleConnectionFrom:
	Receiver: a WebServer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		listenerSocket: 	a Socket[waitingForConnection]
		listenerProcess: 	nil
		interface: 	nil
		port: 	9898
		mutex: 	a Mutex
		connections: 	an IdentitySet(a Process in nil a Process in [self schedule.
	bein...etc...
		entryPoints: 	a Dictionary('/broadcast'->an Array(#('GET' 'POST') [:req | 
| ws ...etc...
		vault: 	a Dictionary()
		logAction: 	[:aString | Transcript cr; show: aString]
		nonceCache: 	a Dictionary()
		sessions: 	a Dictionary()
		serverString: 	nil
		errorHandler: 	nil
		accessLog: 	nil
		certName: 	nil
		siteUrl: 	nil


BlockClosure>>on:do:
	Receiver: [| ssl |
certName
		ifNil: [stream := SocketStream on: aSocket]
		ifNotNil: [ssl := Smallt...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | (ex isKindOf: NetworkError)
		ifFalse: [self log: 'Error ...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	WebServer>>handleConnectionFrom:
		startpc: 	250
		numArgs: 	0


WebServer>>handleConnectionFrom:
	Receiver: a WebServer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		listenerSocket: 	a Socket[waitingForConnection]
		listenerProcess: 	nil
		interface: 	nil
		port: 	9898
		mutex: 	a Mutex
		connections: 	an IdentitySet(a Process in nil a Process in [self schedule.
	bein...etc...
		entryPoints: 	a Dictionary('/broadcast'->an Array(#('GET' 'POST') [:req | 
| ws ...etc...
		vault: 	a Dictionary()
		logAction: 	[:aString | Transcript cr; show: aString]
		nonceCache: 	a Dictionary()
		sessions: 	a Dictionary()
		serverString: 	nil
		errorHandler: 	nil
		accessLog: 	nil
		certName: 	nil
		siteUrl: 	nil


[self handleConnectionFrom: aSocket] in [[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
		critical: [connections
				remove: Processor activeProcess
				ifAbsent: []]] in [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
		critical: [connections
				remove: Processor activeProcess
				ifAbsent: []]]
		ensure: [aSocket destroy]] in WebServer>>asyncHandleConnectionFrom:
	Receiver: a WebServer
	Arguments and temporary variables: 
		aSocket: 	a Socket[destroyed]
	Receiver's instance variables: 
		listenerSocket: 	a Socket[waitingForConnection]
		listenerProcess: 	nil
		interface: 	nil
		port: 	9898
		mutex: 	a Mutex
		connections: 	an IdentitySet(a Process in nil a Process in [self schedule.
	bein...etc...
		entryPoints: 	a Dictionary('/broadcast'->an Array(#('GET' 'POST') [:req | 
| ws ...etc...
		vault: 	a Dictionary()
		logAction: 	[:aString | Transcript cr; show: aString]
		nonceCache: 	a Dictionary()
		sessions: 	a Dictionary()
		serverString: 	nil
		errorHandler: 	nil
		accessLog: 	nil
		certName: 	nil
		siteUrl: 	nil


BlockClosure>>on:do:
	Receiver: [self handleConnectionFrom: aSocket]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | aSocket destroy]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aS...etc...
		startpc: 	76
		numArgs: 	0


[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
		critical: [connections
				remove: Processor activeProcess
				ifAbsent: []]] in [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
		critical: [connections
				remove: Processor activeProcess
				ifAbsent: []]]
		ensure: [aSocket destroy]] in WebServer>>asyncHandleConnectionFrom:
	Receiver: a WebServer
	Arguments and temporary variables: 
		aSocket: 	a Socket[destroyed]
	Receiver's instance variables: 
		listenerSocket: 	a Socket[waitingForConnection]
		listenerProcess: 	nil
		interface: 	nil
		port: 	9898
		mutex: 	a Mutex
		connections: 	an IdentitySet(a Process in nil a Process in [self schedule.
	bein...etc...
		entryPoints: 	a Dictionary('/broadcast'->an Array(#('GET' 'POST') [:req | 
| ws ...etc...
		vault: 	a Dictionary()
		logAction: 	[:aString | Transcript cr; show: aString]
		nonceCache: 	a Dictionary()
		sessions: 	a Dictionary()
		serverString: 	nil
		errorHandler: 	nil
		accessLog: 	nil
		certName: 	nil
		siteUrl: 	nil


BlockClosure>>ensure:
	Receiver: [[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
		...etc...
	Arguments and temporary variables: 
		aBlock: 	[aSocket destroy]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | a...etc...
		startpc: 	71
		numArgs: 	0


[[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
		critical: [connections
				remove: Processor activeProcess
				ifAbsent: []]]
		ensure: [aSocket destroy]] in WebServer>>asyncHandleConnectionFrom:
	Receiver: a WebServer
	Arguments and temporary variables: 
		aSocket: 	a Socket[destroyed]
	Receiver's instance variables: 
		listenerSocket: 	a Socket[waitingForConnection]
		listenerProcess: 	nil
		interface: 	nil
		port: 	9898
		mutex: 	a Mutex
		connections: 	an IdentitySet(a Process in nil a Process in [self schedule.
	bein...etc...
		entryPoints: 	a Dictionary('/broadcast'->an Array(#('GET' 'POST') [:req | 
| ws ...etc...
		vault: 	a Dictionary()
		logAction: 	[:aString | Transcript cr; show: aString]
		nonceCache: 	a Dictionary()
		sessions: 	a Dictionary()
		serverString: 	nil
		errorHandler: 	nil
		accessLog: 	nil
		certName: 	nil
		siteUrl: 	nil


BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
[caught := true.
	self wait.
	blockValue := mutuallyExcludedBlock value] in Semaphore>>critical:
BlockClosure>>ensure:
Semaphore>>critical:
Mutex>>critical:
[Transcript cr; show: 'Closing ' , ws.
	mutex
		critical: [sockets
				remove: ws
				ifAbsent: []]] in [:req | 
| ws |
ws := req asWebSocket.
	ws timeout: 1000.
	Transcript cr; show: 'Client connected: ' , ws.
	ws send: 'You connected'.
	ws
		onMessage: [:data | self
				processMessage: data
				withMutex: mutex
				fromSockets: sockets].
	ws
		onClose: [Transcript cr; show: 'Closing ' , ws.
			mutex
				critical: [sockets
						remove: ws
						ifAbsent: []]].
	ws
		onError: [:ex | nil].
	mutex
		critical: [sockets add: ws.
			ws send: 'You added to client list'].
	ws run] in WebHMIServer>>startServerOnPort:
BlockClosure>>valueWithPossibleArgs:
WebSocket07(WebSocket)>>handle:arguments:ifAbsent:
WebSocket07(WebSocket)>>handle:arguments:
WebSocket07(WebSocket)>>handleClose
[[stream socket destroy]
		on: Error
		do: [:ex | nil].
	self handleClose] in WebSocket07>>run
MethodContext(ContextPart)>>resume:
BlockClosure>>ensure:
WebSocket07>>run
[:req | 
| ws |
ws := req asWebSocket.
	ws timeout: 1000.
	Transcript cr; show: 'Client connected: ' , ws.
	ws send: 'You connected'.
	ws
		onMessage: [:data | self
				processMessage: data
				withMutex: mutex
				fromSockets: sockets].
	ws
		onClose: [Transcript cr; show: 'Closing ' , ws.
			mutex
				critical: [sockets
						remove: ws
						ifAbsent: []]].
	ws
		onError: [:ex | nil].
	mutex
		critical: [sockets add: ws.
			ws send: 'You added to client list'].
	ws run] in WebHMIServer>>startServerOnPort:
WebServer>>invokeAction:request:
[self
		invokeAction: (action at: 2)
		request: request] in WebServer>>dispatchRequest:url:
BlockClosure>>on:do:
WebServer>>dispatchRequest:url:
WebServer>>dispatchRequest:
[| ssl |
certName
		ifNil: [stream := SocketStream on: aSocket]
		ifNotNil: [ssl := Smalltalk
						at: #SqueakSSL
						ifAbsent: [self error: 'SqueakSSL not installed'].
			stream := ssl secureSocketStream on: aSocket.
			[stream sslAccept: certName]
				on: Error
				do: [^ stream destroy]].
	[aSocket isConnected]
		whileTrue: [stream peek
				ifNil: [^ aSocket destroy].
			request := self newRequest.
			[request readFrom: stream]
				on: Error
				do: [:ex | 
					(ex isKindOf: NetworkError)
						ifFalse: [[request send400Response]
								on: Error
								do: [:ignore | nil]].
					^ aSocket destroy].
			self dispatchRequest: request].
	nil] in WebServer>>handleConnectionFrom:
BlockClosure>>on:do:
WebServer>>handleConnectionFrom:
[self handleConnectionFrom: aSocket] in [[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
		critical: [connections
				remove: Processor activeProcess
				ifAbsent: []]] in [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
		critical: [connections
				remove: Processor activeProcess
				ifAbsent: []]]
		ensure: [aSocket destroy]] in WebServer>>asyncHandleConnectionFrom:
BlockClosure>>on:do:
[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
		critical: [connections
				remove: Processor activeProcess
				ifAbsent: []]] in [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
		critical: [connections
				remove: Processor activeProcess
				ifAbsent: []]]
		ensure: [aSocket destroy]] in WebServer>>asyncHandleConnectionFrom:
BlockClosure>>ensure:
[[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
		critical: [connections
				remove: Processor activeProcess
				ifAbsent: []]]
		ensure: [aSocket destroy]] in WebServer>>asyncHandleConnectionFrom:
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:42 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:44 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:46 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:46 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:47 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:47 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:48 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:48 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:48 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:48 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:48 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:49 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:49 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:49 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:49 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:49 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:50 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:50 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:50 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:50 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:50 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:51 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:51 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:51 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:51 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:54 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:37:55 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:02 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "stop" is nil
21 April 2012 2:38:16 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #stop
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	stop
		exception: 	MessageNotUnderstood: receiver of "stop" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '|server|
server := WebHMIServer new.
server st...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(464781312)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ server stop
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(717225984)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '|server|
server := WebHMIServer new.
server st...etc...
		requestor: 	a TextMorphForEditView(464781312)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422095010) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnP...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422095010) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422095010) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422095010) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(464781312)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(464781312)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422095010) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(511705088)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422095010) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422095010) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(464781312)
	Receiver's instance variables: 
		timeStamp: 	422094424
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	339@65
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422095010) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422095010) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(464781312)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1119@96 corner: 1135@112
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(671612928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1119@95 1119@96 mouseMove 422085374 nil]
		targetOffset: 	345@64
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422085374 1119 96 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(74448896) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(74448896) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(464781312)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1119@96 corner: 1135@112
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(671612928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1119@95 1119@96 mouseMove 422085374 nil]
		targetOffset: 	345@64
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422085374 1119 96 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(464781312)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1119@96 corner: 1135@112
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(671612928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1119@95 1119@96 mouseMove 422085374 nil]
		targetOffset: 	345@64
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422085374 1119 96 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	1119@96 corner: 1135@112
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(671612928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1119@95 1119@96 mouseMove 422085374 nil]
		targetOffset: 	345@64
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422085374 1119 96 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1119@96 corner: 1135@112
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(671612928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1119@95 1119@96 mouseMove 422085374 nil]
		targetOffset: 	345@64
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422085374 1119 96 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 422094424 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1119@96 corner: 1135@112
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(671612928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1119@95 1119@96 mouseMove 422085374 nil]
		targetOffset: 	345@64
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422085374 1119 96 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(74448896))(a PreDebug...etc...
		lastStepTime: 	422094414
		lastStepMessage: 	nil
		lastCycleTime: 	422094456
		alarms: 	a Heap()
		lastAlarmTime: 	422094414
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #stop
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "stopListener" is nil
21 April 2012 2:38:32 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #stopListener
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	stopListener
		exception: 	MessageNotUnderstood: receiver of "stopListener" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '|server|
server := WebHMIServer new.
server st...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(464781312)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ server stopListener
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(944504832)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '|server|
server := WebHMIServer new.
server st...etc...
		requestor: 	a TextMorphForEditView(464781312)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422111140) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnP...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422111140) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422111140) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422111140) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(464781312)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(464781312)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422111140) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(511705088)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422111140) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422111140) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(464781312)
	Receiver's instance variables: 
		timeStamp: 	422110546
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	112@73
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422111140) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422111140) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(464781312)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	892@104 corner: 908@120
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(607125504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[892@105 892@104 mouseMove 422104792 nil]
		targetOffset: 	112@74
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422104792 892 104 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(239337472) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(239337472) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(464781312)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	892@104 corner: 908@120
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(607125504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[892@105 892@104 mouseMove 422104792 nil]
		targetOffset: 	112@74
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422104792 892 104 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(464781312)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	892@104 corner: 908@120
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(607125504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[892@105 892@104 mouseMove 422104792 nil]
		targetOffset: 	112@74
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422104792 892 104 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	892@104 corner: 908@120
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(607125504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[892@105 892@104 mouseMove 422104792 nil]
		targetOffset: 	112@74
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422104792 892 104 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	892@104 corner: 908@120
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(607125504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[892@105 892@104 mouseMove 422104792 nil]
		targetOffset: 	112@74
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422104792 892 104 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 422110546 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	892@104 corner: 908@120
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(607125504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[892@105 892@104 mouseMove 422104792 nil]
		targetOffset: 	112@74
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422104792 892 104 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(239337472))(a PreDebu...etc...
		lastStepTime: 	422110544
		lastStepMessage: 	nil
		lastCycleTime: 	422110586
		alarms: 	a Heap()
		lastAlarmTime: 	422110544
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #stopListener
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: WebHMIServer>>stopListener
21 April 2012 2:38:38 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

WebHMIServer(Object)>>doesNotUnderstand: #stopListener
	Receiver: a WebHMIServer
	Arguments and temporary variables: 
		aMessage: 	stopListener
		exception: 	MessageNotUnderstood: WebHMIServer>>stopListener
		resumeValue: 	nil
	Receiver's instance variables: 
		elements: 	an OrderedCollection(a HMIelement a HMIelement a HMIelement)
		element: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		server: 	a WebHMIServer
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '|server|
server := WebHMIServer new.
server st...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(464781312)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| server |
	server := WebHMIServer new.
	server startServerOn...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(194772992)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '|server|
server := WebHMIServer new.
server st...etc...
		requestor: 	a TextMorphForEditView(464781312)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(464781312)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422117024) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnP...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422117024) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422117024) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422117024) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(464781312)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(464781312)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422117024) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(511705088)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422117024) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422117024) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(464781312)
	Receiver's instance variables: 
		timeStamp: 	422116342
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	51@ -8
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422117024) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(464781312)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 577@86
		owner: 	a TransformMorph(563347456)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 577@86
		color: 	Color black
		extension: 	a MorphExtension (544997376) [other:  (blinkStart -> 422117024) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Times New Roman
		text: 	a Text for '|server|
server := WebHMIServer new.
server startServerOnPort...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(511705088)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(464781312)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	907@32 corner: 923@48
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(377225216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@23 907@32 mouseMove CTRL 422116348 nil]
		targetOffset: 	164@77
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422116348 837 23 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1061683200) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1061683200) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(464781312)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	907@32 corner: 923@48
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(377225216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@23 907@32 mouseMove CTRL 422116348 nil]
		targetOffset: 	164@77
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422116348 837 23 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(464781312)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	907@32 corner: 923@48
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(377225216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@23 907@32 mouseMove CTRL 422116348 nil]
		targetOffset: 	164@77
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422116348 837 23 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	907@32 corner: 923@48
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(377225216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@23 907@32 mouseMove CTRL 422116348 nil]
		targetOffset: 	164@77
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422116348 837 23 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	907@32 corner: 923@48
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(377225216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@23 907@32 mouseMove CTRL 422116348 nil]
		targetOffset: 	164@77
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422116348 837 23 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 422116342 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	907@32 corner: 923@48
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(377225216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@23 907@32 mouseMove CTRL 422116348 nil]
		targetOffset: 	164@77
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422116348 837 23 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1061683200))(a PreDeb...etc...
		lastStepTime: 	422116340
		lastStepMessage: 	nil
		lastCycleTime: 	422116446
		alarms: 	a Heap()
		lastAlarmTime: 	422116340
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
WebHMIServer(Object)>>doesNotUnderstand: #stopListener
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:41 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:42 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:43 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:43 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:43 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:44 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:44 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:44 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:44 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:44 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:45 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:45 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:56 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:57 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:57 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:58 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:58 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:58 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:58 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:59 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:38:59 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:39:30 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:39:31 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:39:31 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:39:31 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:39:32 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:39:32 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:39:32 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:39:32 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:39:33 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:39:33 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:39:33 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:39:33 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:39:33 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Unwind error during termination
21 April 2012 2:45:31 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

BlockClosure>>on:do:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[:ex | error
		ifNil: [error := ex exception.
			topContext := t...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextOn:do:
		startpc: 	40
		numArgs: 	0


BlockClosure>>ensure:
	Receiver: [chain := thisContext sender cut: ctxt.
	ctxt jump]
	Arguments and temporary variables: 
		aBlock: 	[error
		ifNil: [topContext := thisContext.
			here jump]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ContextPart class>>contextEnsure:
		startpc: 	40
		numArgs: 	0


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self handleConnectionFrom: aSocket]
		on: Error
		do: [:ex | aSocket destroy].
	mutex
	...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	WebServer>>asyncHandleConnectionFrom:
		startpc: 	66
		numArgs: 	0



--- The full stack ---
BlockClosure>>on:do:
BlockClosure>>ensure:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:06 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[146@500 156@489 mouseEnter 422983330 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [146@500 156@489 mouseEnter 422983330 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983330
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@489
		handler: 	nil
		wasHandled: 	false
		startPoint: 	146@500
		trail: 	{(152@493). (156@489)}


MouseMoveEvent>>sentTo:
	Receiver: [146@500 156@489 mouseEnter 422983330 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983330
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@489
		handler: 	nil
		wasHandled: 	false
		startPoint: 	146@500
		trail: 	{(152@493). (156@489)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[146@500 156@489 mouseEnter 422983330 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[146@500 156@489 mouseEnter 422983330 nil]
		originalEvent: 	[146@500 156@489 mouseMove 422983330 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[146@500 156@489 mouseEnter 422983330 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[146@500 156@489 mouseEnter 422983330 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[146@500 156@489 mouseMove 422983330 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[146@500 156@489 mouseEnter 422983330 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[146@500 156@489 mouseMove 422983330 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[146@500 156@489 mouseMove 422983330 nil]
		anEnteredMorph: 	[146@500 156@489 mouseEnter 422983330 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[146@500 156@489 mouseMove 422983330 nil]
		asMouseEnterEvent: 	[146@500 156@489 mouseEnter 422983330 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[146@500 156@489 mouseMove 422983330 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[146@500 156@489 mouseMove 422983330 nil]
		evt: 	[146@500 156@489 mouseMove 422983330 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(456392704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[146@500 156@489 mouseMove 422983330 nil]
		evtBuf: 	#(1 422983330 152 493 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(456392704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(89128960) an OBS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:06 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


MouseMoveEvent>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
		originalEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		anEnteredMorph: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		asMouseEnterEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		evt: 	[156@489 157@488 mouseMove 422983346 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(952369152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseMove 422983346 nil]
		evtBuf: 	#(1 422983346 157 488 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(952369152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(585105408) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:06 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


MouseMoveEvent>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
		originalEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		anEnteredMorph: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		asMouseEnterEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(282591232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1009516544) a Pr...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:06 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


MouseMoveEvent>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
		originalEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		anEnteredMorph: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		asMouseEnterEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(820248576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(508035072) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:06 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


MouseMoveEvent>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
		originalEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		anEnteredMorph: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		asMouseEnterEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(630456320)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(318242816) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:06 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


MouseMoveEvent>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
		originalEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		anEnteredMorph: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		asMouseEnterEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(895221760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(527958016) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:07 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


MouseMoveEvent>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
		originalEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		anEnteredMorph: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		asMouseEnterEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(158597120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(920125440) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:07 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


MouseMoveEvent>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
		originalEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		anEnteredMorph: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		asMouseEnterEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(121110528)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(882638848) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:07 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


MouseMoveEvent>>sentTo:
	Receiver: [156@489 157@488 mouseEnter 422983346 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983346
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	157@488
		handler: 	nil
		wasHandled: 	false
		startPoint: 	156@489
		trail: 	{(157@488)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
		originalEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[156@489 157@488 mouseEnter 422983346 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		anEnteredMorph: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
		asMouseEnterEvent: 	[156@489 157@488 mouseEnter 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[156@489 157@488 mouseMove 422983346 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(263454720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(969932800) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:07 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		evt: 	[157@488 156@490 mouseMove 422983498 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(835452928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseMove 422983498 nil]
		evtBuf: 	#(1 422983498 156 490 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(835452928)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(523239424) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:07 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(560201728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(247988224) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:07 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(272367616)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1033895936) a Pr...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:08 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(836239360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(765460480) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:08 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(827064320)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(514850816) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:08 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(619970560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(307757056) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:08 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(279183360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1040711680) a Pr...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:08 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(72351744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(833880064) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:09 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(524550144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(212336640) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:09 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(563347456)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(251133952) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:09 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(183762944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(945291264) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:09 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1043857408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(731643904) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:09 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(651689984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(339476480) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:09 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(596639744)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(284426240) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:10 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(92536832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(854065152) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:10 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(32768000)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(783286272))(an OMenuMorp...etc...
		lastStepTime: 	422983336
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(738197504) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:10 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(396099584)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(83886080) a PreD...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:10 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	156@490 corner: 172@506
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(462946304)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422983498 156 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422984132
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(150732800) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:10 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
	THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:10 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	326@570 corner: 342@586
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(271319040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[156@490 326@570 mouseMove 422985330 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422985330 157 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1032585216) a Pr...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:11 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	326@570 corner: 342@586
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(479199232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[156@490 326@570 mouseMove 422985330 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422985330 157 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(111935488) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:11 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	326@570 corner: 342@586
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(984350720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[156@490 326@570 mouseMove 422985330 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422985330 157 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(672137216) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:11 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	326@570 corner: 342@586
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(191889408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[156@490 326@570 mouseMove 422985330 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422985330 157 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(953417728) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:11 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	326@570 corner: 342@586
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(998506496)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[156@490 326@570 mouseMove 422985330 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422985330 157 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(686292992) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:11 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	326@570 corner: 342@586
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(439091200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[156@490 326@570 mouseMove 422985330 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422985330 157 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(159121408) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:12 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	326@570 corner: 342@586
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(572260352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[156@490 326@570 mouseMove 422985330 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422985330 157 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(260046848) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:12 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	326@570 corner: 342@586
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(194772992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[156@490 326@570 mouseMove 422985330 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422985330 157 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(901251072) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:12 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	326@570 corner: 342@586
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(90963968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[156@490 326@570 mouseMove 422985330 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422985330 157 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1000865792) a Pr...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 April 2012 2:53:12 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


MouseMoveEvent>>sentTo:
	Receiver: [157@488 156@490 mouseEnter 422983498 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(783286272)
	Receiver's instance variables: 
		timeStamp: 	422983498
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	156@490
		handler: 	nil
		wasHandled: 	false
		startPoint: 	157@488
		trail: 	{(156@490)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
		originalEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aMorph: 	an OMenuMorph(783286272)
		transformedEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[157@488 156@490 mouseEnter 422983498 nil]
		aLeftMorph: 	an OMenuMorph(783286272)
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(783286272)
		asMouseEnterEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		anEnteredMorph: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(783286272))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(783286272))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
		asMouseEnterEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[157@488 156@490 mouseMove 422983498 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBSystemWindow(822607872) a PasteUpMorph(425197568...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keyDown '<cr>']
		evt: 	[keyDown '<cr>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	326@570 corner: 342@586
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(342884352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[156@490 326@570 mouseMove 422985330 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422985330 157 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keyDown '<cr>']
		evtBuf: 	#(2 422984090 13 1 0 13 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	326@570 corner: 342@586
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(342884352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[156@490 326@570 mouseMove 422985330 nil]
		targetOffset: 	476@85
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 422985330 157 490 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(30670848) a PreD...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
21 April 2012 2:53:12 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Integer)>>timesRepeat:
	Receiver: 2
	Arguments and temporary variables: 
		aBlock: 	[aStream tab]
		count: 	2
	Receiver's instance variables: 
2

[:title :index | 
indent
		timesRepeat: [aStream tab].
	aStream nextPutAll: title;
		 nextPut: $:;
		 space;
		 tab;
		
		nextPutAll: ((self instVarAt: index)
				printStringLimitedTo: (sizeLimit - 3 - title size max: 1));
		 cr] in OMenuMorph(Object)>>longPrintOn:limitedTo:indent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		aStream: 	'extension'
		sizeLimit: 	6
		indent: 	MultiByteFileStream: '/home/xumuk/Projects/Pharo 1.3/Contents/Resources...etc...
		title: 	80
		index: 	2
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


Array(SequenceableCollection)>>withIndexDo:
	Receiver: #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'borderWidth' 'borderColor...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[:title :index | 
indent
		timesRepeat: [aStream tab].
	a...etc...
		index: 	6
		indexLimiT: 	18
	Receiver's instance variables: 
#('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'borderWidth' 'borderColor...etc...

Array(SequenceableCollection)>>doWithIndex:
	Receiver: #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'borderWidth' 'borderColor...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[:title :index | 
indent
		timesRepeat: [aStream tab].
	a...etc...
	Receiver's instance variables: 
#('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'borderWidth' 'borderColor...etc...

OMenuMorph(Object)>>longPrintOn:limitedTo:indent:
	Receiver: an OMenuMorph(783286272)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/home/xumuk/Projects/Pharo 1.3/Contents/Resource...etc...
		sizeLimit: 	80
		indent: 	2
	Receiver's instance variables: 
		bounds: 	2@475 corner: 202@491
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	2@475 corner: 202@491
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.17300000000000001)
		extension: 	a MorphExtension (799277056) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.17300000000000001)...etc...
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	202@475
		lastActivity: 	422984132


[receiver
		longPrintOn: strm
		limitedTo: 80
		indent: 2] in MethodContext>>printDetails:
	Receiver: OMenuMorph(Morph)>>handleEvent:
	Arguments and temporary variables: 
		strm: 	MultiByteFileStream: '/home/xumuk/Projects/Pharo 1.3/Contents/Resources/H...etc...
	Receiver's instance variables: 
		sender: 	MouseOverHandler>>transform:from:andSendTo:
		pc: 	20
		stackp: 	1
		method: 	(Morph>>#handleEvent: "a CompiledMethod(209453056)")
		closureOrNil: 	nil
		receiver: 	an OMenuMorph(783286272)


BlockClosure>>on:do:
	Receiver: [receiver
		longPrintOn: strm
		limitedTo: 80
		indent: 2]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | errorHandlerBlock cull: ex description cull: ex receiver]...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	MethodContext>>printDetails:
		startpc: 	205
		numArgs: 	0


BlockClosure>>ifError:
	Receiver: [receiver
		longPrintOn: strm
		limitedTo: 80
		indent: 2]
	Arguments and temporary variables: 
		errorHandlerBlock: 	[strm nextPutAll: pe]
	Receiver's instance variables: 
		outerContext: 	MethodContext>>printDetails:
		startpc: 	205
		numArgs: 	0


MethodContext>>printDetails:
	Receiver: OMenuMorph(Morph)>>handleEvent:
	Arguments and temporary variables: 
		strm: 	MultiByteFileStream: '/home/xumuk/Projects/Pharo 1.3/Contents/Resources/H...etc...
		pe: 	'<<error during printing>>'
		str: 	'		anEvent: 	[157@488 156@490 mouseEnter 422983498 nil]
'
		pos: 	643923
	Receiver's instance variables: 
		sender: 	MouseOverHandler>>transform:from:andSendTo:
		pc: 	20
		stackp: 	1
		method: 	(Morph>>#handleEvent: "a CompiledMethod(209453056)")
		closureOrNil: 	nil
		receiver: 	an OMenuMorph(783286272)


MethodContext(ContextPart)>>errorReportOn:
	Receiver: UndefinedObject(Object)>>doesNotUnderstand: #morph
	Arguments and temporary variables: 
		strm: 	MultiByteFileStream: '/home/xumuk/Projects/Pharo 1.3/Contents/Resources/H...etc...
		cnt: 	5
		aContext: 	OMenuMorph(Morph)>>handleEvent:
		startPos: 	641858
	Receiver's instance variables: 
		sender: 	OMenuMorph(ECMenuMorph)>>handleMouseEnter:
		pc: 	54
		stackp: 	3
		method: 	(Object>>#doesNotUnderstand: "a CompiledMethod(144965632)")
		closureOrNil: 	nil
		receiver: 	nil


[:logger | 
logger nextPutAll: 'THERE_BE_DRAGONS_HERE';
		 cr;
		 nextPutAll: errMsg;
		 cr.
	aContext errorReportOn: logger.
	logger
		nextPutAll: (String new: 60 withAll: $-);
		 cr;
		 cr] in SmalltalkImage>>logError:inContext:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		errMsg: 	MultiByteFileStream: '/home/xumuk/Projects/Pharo 1.3/Contents/Resources...etc...
		aContext: 	'MessageNotUnderstood: receiver of "morph" is nil'
		logger: 	UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	nil


[logStream := self openLog.
	aMonadicBlock value: logStream] in SmalltalkImage>>logDuring:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		aMonadicBlock: 	[:logger | 
logger nextPutAll: 'THERE_BE_DRAGONS_HERE';
		 cr;
	...etc...
		logStream: 	an Array(MultiByteFileStream: '/home/xumuk/Projects/Pharo 1.3/Conten...etc...
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	nil


BlockClosure>>ensure:
	Receiver: [logStream := self openLog.
	aMonadicBlock value: logStream]
	Arguments and temporary variables: 
		aBlock: 	[self closeLog: logStream]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	SmalltalkImage>>logDuring:
		startpc: 	34
		numArgs: 	0


SmalltalkImage>>logDuring:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		aMonadicBlock: 	[:logger | 
logger nextPutAll: 'THERE_BE_DRAGONS_HERE';
		 cr;
	...etc...
		logStream: 	an Array(MultiByteFileStream: '/home/xumuk/Projects/Pharo 1.3/Conten...etc...
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	nil


SmalltalkImage>>logError:inContext:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		errMsg: 	'MessageNotUnderstood: receiver of "morph" is nil'
		aContext: 	UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	nil


[| debugger |
debugger := Smalltalk tools debugger new
				process: process
				controller: nil
				context: context.
	bool
		ifTrue: [debugger openFullNoSuspendLabel: title]
		ifFalse: [debugger openNotifierContents: contentsStringOrNil label: title].
	debugger errorWasInUIProcess: errorWasInUIProcess.
	Smalltalk tools debugger logDebuggerStackToFile
		ifTrue: [Smalltalk logError: title inContext: context]] in [[| debugger |
	debugger := Smalltalk tools debugger new
				process: process
				controller: nil
				context: context.
	bool
		ifTrue: [debugger openFullNoSuspendLabel: title]
		ifFalse: [debugger openNotifierContents: contentsStringOrNil label: title].
	debugger errorWasInUIProcess: errorWasInUIProcess.
	Smalltalk tools debugger logDebuggerStackToFile
		ifTrue: [Smalltalk logError: title inContext: context]]
		on: Error
		do: [:ex | Debugger primitiveError: 'Orginal error: ' , title asString , '.
	Smalltalk tools debugger error: '
					, ([ex description]
							on: Error
							do: ['a ' , ex class printString]) , ':']] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		process: 	a Process in MorphicUIManager>>openDebuggerOn:context:label:contents:f...etc...
		context: 	UndefinedObject(Object)>>doesNotUnderstand: #morph
		title: 	'MessageNotUnderstood: receiver of "morph" is nil'
		contentsStringOrNil: 	nil
		bool: 	false
		errorWasInUIProcess: 	true
		debugger: 	a Debugger
	Receiver's instance variables: 
		interactiveParser: 	nil


BlockClosure>>on:do:
	Receiver: [| debugger |
debugger := Smalltalk tools debugger new
				process: process
				controller...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | Debugger primitiveError: 'Orginal error: ' , title asStri...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[| debugger |
	debugger := Smalltalk tools debugger new
				proc...etc...
		startpc: 	146
		numArgs: 	0


[[| debugger |
	debugger := Smalltalk tools debugger new
				process: process
				controller: nil
				context: context.
	bool
		ifTrue: [debugger openFullNoSuspendLabel: title]
		ifFalse: [debugger openNotifierContents: contentsStringOrNil label: title].
	debugger errorWasInUIProcess: errorWasInUIProcess.
	Smalltalk tools debugger logDebuggerStackToFile
		ifTrue: [Smalltalk logError: title inContext: context]]
		on: Error
		do: [:ex | Debugger primitiveError: 'Orginal error: ' , title asString , '.
	Smalltalk tools debugger error: '
					, ([ex description]
							on: Error
							do: ['a ' , ex class printString]) , ':']] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		process: 	a Process in MorphicUIManager>>openDebuggerOn:context:label:contents:f...etc...
		context: 	UndefinedObject(Object)>>doesNotUnderstand: #morph
		title: 	'MessageNotUnderstood: receiver of "morph" is nil'
		contentsStringOrNil: 	nil
		bool: 	false
		errorWasInUIProcess: 	true
	Receiver's instance variables: 
		interactiveParser: 	nil


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
		queue: 	SharedQueue with 12 items
		nextInQueue: 	[[| debugger |
	debugger := Smalltalk tools debugger new
				proce...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>runStepMethods
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(165937152) a PreDe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(83886080))(a PreDebug...etc...
		lastStepTime: 	422988412
		lastStepMessage: 	nil
		lastCycleTime: 	422988858
		alarms: 	a Heap()
		lastAlarmTime: 	422983336
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(165937152) a PreDe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
SmallInteger(Integer)>>timesRepeat:
[:title :index | 
indent
		timesRepeat: [aStream tab].
	aStream nextPutAll: title;
		 nextPut: $:;
		 space;
		 tab;
		
		nextPutAll: ((self instVarAt: index)
				printStringLimitedTo: (sizeLimit - 3 - title size max: 1));
		 cr] in OMenuMorph(Object)>>longPrintOn:limitedTo:indent:
Array(SequenceableCollection)>>withIndexDo:
Array(SequenceableCollection)>>doWithIndex:
OMenuMorph(Object)>>longPrintOn:limitedTo:indent:
[receiver
		longPrintOn: strm
		limitedTo: 80
		indent: 2] in MethodContext>>printDetails:
BlockClosure>>on:do:
BlockClosure>>ifError:
MethodContext>>printDetails:
MethodContext(ContextPart)>>errorReportOn:
[:logger | 
logger nextPutAll: 'THERE_BE_DRAGONS_HERE';
		 cr;
		 nextPutAll: errMsg;
		 cr.
	aContext errorReportOn: logger.
	logger
		nextPutAll: (String new: 60 withAll: $-);
		 cr;
		 cr] in SmalltalkImage>>logError:inContext:
[logStream := self openLog.
	aMonadicBlock value: logStream] in SmalltalkImage>>logDuring:
BlockClosure>>ensure:
SmalltalkImage>>logDuring:
SmalltalkImage>>logError:inContext:
[| debugger |
debugger := Smalltalk tools debugger new
				process: process
				controller: nil
				context: context.
	bool
		ifTrue: [debugger openFullNoSuspendLabel: title]
		ifFalse: [debugger openNotifierContents: contentsStringOrNil label: title].
	debugger errorWasInUIProcess: errorWasInUIProcess.
	Smalltalk tools debugger logDebuggerStackToFile
		ifTrue: [Smalltalk logError: title inContext: context]] in [[| debugger |
	debugger := Smalltalk tools debugger new
				process: process
				controller: nil
				context: context.
	bool
		ifTrue: [debugger openFullNoSuspendLabel: title]
		ifFalse: [debugger openNotifierContents: contentsStringOrNil label: title].
	debugger errorWasInUIProcess: errorWasInUIProcess.
	Smalltalk tools debugger logDebuggerStackToFile
		ifTrue: [Smalltalk logError: title inContext: context]]
		on: Error
		do: [:ex | Debugger primitiveError: 'Orginal error: ' , title asString , '.
	Smalltalk tools debugger error: '
					, ([ex description]
							on: Error
							do: ['a ' , ex class printString]) , ':']] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
BlockClosure>>on:do:
[[| debugger |
	debugger := Smalltalk tools debugger new
				process: process
				controller: nil
				context: context.
	bool
		ifTrue: [debugger openFullNoSuspendLabel: title]
		ifFalse: [debugger openNotifierContents: contentsStringOrNil label: title].
	debugger errorWasInUIProcess: errorWasInUIProcess.
	Smalltalk tools debugger logDebuggerStackToFile
		ifTrue: [Smalltalk logError: title inContext: context]]
		on: Error
		do: [:ex | Debugger primitiveError: 'Orginal error: ' , title asString , '.
	Smalltalk tools debugger error: '
					, ([ex description]
							on: Error
							do: ['a ' , ex class printString]) , ':']] in MorphicUIManager>>openDebuggerOn:context:label:contents:fullView:
WorldState>>runStepMethodsIn:
PasteUpMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
21 April 2012 6:26:51 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	2


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		fromIndex: 	1
		toIndex: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	2


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '((WebHMIElement elements at: 1) widget params ...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(272367616)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ ((WebHMIElement elements at: 1) widget params at: 1) pName:...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(228065280)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '((WebHMIElement elements at: 1) widget params ...etc...
		requestor: 	a TextMorphForEditView(272367616)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 435810208) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((WebHMIElement elements at: 1) widget params at:1) pName: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '((WebHMIElement elements at: 1) widget params at:1) pName:...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 435810208) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((WebHMIElement elements at: 1) widget params at:1) pName: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 435810208) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((WebHMIElement elements at: 1) widget params at:1) pName: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 435810208) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((WebHMIElement elements at: 1) widget params at:1) pName: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 435810208) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((WebHMIElement elements at: 1) widget params at:1) pName: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(665059328)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 435810208) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((WebHMIElement elements at: 1) widget params at:1) pName: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 435810208) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((WebHMIElement elements at: 1) widget params at:1) pName: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(272367616)
	Receiver's instance variables: 
		timeStamp: 	435809628
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	118@72
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 435810208) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((WebHMIElement elements at: 1) widget params at:1) pName: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 435810208) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '((WebHMIElement elements at: 1) widget params at:1) pName: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	533@212 corner: 549@228
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(47710208)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[532@212 533@212 mouseMove 435807864 nil]
		targetOffset: 	61@27
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 435807864 533 212 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(811859968) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(811859968) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	533@212 corner: 549@228
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(47710208)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[532@212 533@212 mouseMove 435807864 nil]
		targetOffset: 	61@27
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 435807864 533 212 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	533@212 corner: 549@228
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(47710208)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[532@212 533@212 mouseMove 435807864 nil]
		targetOffset: 	61@27
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 435807864 533 212 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	533@212 corner: 549@228
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(47710208)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[532@212 533@212 mouseMove 435807864 nil]
		targetOffset: 	61@27
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 435807864 533 212 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	533@212 corner: 549@228
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(47710208)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[532@212 533@212 mouseMove 435807864 nil]
		targetOffset: 	61@27
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 435807864 533 212 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 435809628 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	533@212 corner: 549@228
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(47710208)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[532@212 533@212 mouseMove 435807864 nil]
		targetOffset: 	61@27
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 435807864 533 212 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
21 April 2012 7:05:42 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

[delaySemaphore wait] in Delay>>wait
	Receiver: a Delay(20 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delayDuration: 	20
		resumptionTime: 	438140302
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false


BlockClosure>>ifCurtailed:
	Receiver: [delaySemaphore wait]
	Arguments and temporary variables: 
		aBlock: 	[self unschedule]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	36
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(20 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delayDuration: 	20
		resumptionTime: 	438140302
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false


WorldState>>interCyclePause:
	Receiver: a WorldState
	Arguments and temporary variables: 
		milliSecs: 	20
		currentTime: 	438140282
		wait: 	20
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(640155648))(a SystemWin...etc...
		lastStepTime: 	438140282
		lastStepMessage: 	nil
		lastCycleTime: 	438140302
		alarms: 	a Heap()
		lastAlarmTime: 	438140282
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(640155648))(a SystemWin...etc...
		lastStepTime: 	438140282
		lastStepMessage: 	nil
		lastCycleTime: 	438140302
		alarms: 	a Heap()
		lastAlarmTime: 	438140282
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(640155648) an OBSy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
[delaySemaphore wait] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
WorldState>>interCyclePause:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: WebHMIServer class>>sockets
21 April 2012 7:33:11 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

WebHMIServer class(Object)>>doesNotUnderstand: #sockets
	Receiver: WebHMIServer
	Arguments and temporary variables: 
		aMessage: 	sockets
		exception: 	MessageNotUnderstood: WebHMIServer class>>sockets
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	134
		instanceVariables: 	#('elements' 'element')
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#WebHMIServer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#WebHMI
		traitComposition: 	nil
		localSelectors: 	nil
		sockets: 	nil


WebHMIElement>>changeParam:value:
	Receiver: a WebHMIElement
	Arguments and temporary variables: 
		aParam: 	'CPU'
		aValue: 	'50'
	Receiver's instance variables: 
		state: 	false
		elName: 	'adminWorkstation'
		elType: 	a WebHMIElementType
		widget: 	a WebHMIWidget


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '(WebHMIElement elements at: 3) changeParam: ''...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(272367616)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ (WebHMIElement elements at: 3)
		changeParam: 'CPU'
		value...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(898629632)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '(WebHMIElement elements at: 3) changeParam: ''...etc...
		requestor: 	a TextMorphForEditView(272367616)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439790476) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value:...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439790476) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439790476) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439790476) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439790476) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(665059328)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439790476) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439790476) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(272367616)
	Receiver's instance variables: 
		timeStamp: 	439789870
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	39@69
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439790476) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439790476) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	424@167 corner: 440@183
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(493617152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[423@167 424@167 mouseMove CTRL 439789866 nil]
		targetOffset: 	7@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 439789866 424 167 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1033633792) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1033633792) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	424@167 corner: 440@183
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(493617152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[423@167 424@167 mouseMove CTRL 439789866 nil]
		targetOffset: 	7@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 439789866 424 167 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	424@167 corner: 440@183
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(493617152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[423@167 424@167 mouseMove CTRL 439789866 nil]
		targetOffset: 	7@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 439789866 424 167 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	424@167 corner: 440@183
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(493617152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[423@167 424@167 mouseMove CTRL 439789866 nil]
		targetOffset: 	7@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 439789866 424 167 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	424@167 corner: 440@183
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(493617152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[423@167 424@167 mouseMove CTRL 439789866 nil]
		targetOffset: 	7@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 439789866 424 167 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 439789870 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	424@167 corner: 440@183
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(493617152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[423@167 424@167 mouseMove CTRL 439789866 nil]
		targetOffset: 	7@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 439789866 424 167 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(822607872))(an OBSys...etc...
		lastStepTime: 	439789884
		lastStepMessage: 	nil
		lastCycleTime: 	439789924
		alarms: 	a Heap()
		lastAlarmTime: 	439789884
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
WebHMIServer class(Object)>>doesNotUnderstand: #sockets
WebHMIElement>>changeParam:value:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "do:" is nil
21 April 2012 7:35:23 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #do:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	do: [:s | s send: '@param Transcript show: hahaha']
		exception: 	MessageNotUnderstood: receiver of "do:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

WebHMIElement>>changeParam:value:
	Receiver: a WebHMIElement
	Arguments and temporary variables: 
		aParam: 	'CPU'
		aValue: 	'50'
	Receiver's instance variables: 
		state: 	false
		elName: 	'adminWorkstation'
		elType: 	a WebHMIElementType
		widget: 	a WebHMIWidget


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '(WebHMIElement elements at: 3) changeParam: ''...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(272367616)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ (WebHMIElement elements at: 3)
		changeParam: 'CPU'
		value...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(403963904)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '(WebHMIElement elements at: 3) changeParam: ''...etc...
		requestor: 	a TextMorphForEditView(272367616)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439922058) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value:...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439922058) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439922058) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439922058) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439922058) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(665059328)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439922058) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439922058) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(272367616)
	Receiver's instance variables: 
		timeStamp: 	439921474
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	343@115
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439922058) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 439922058) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elements at: 3) changeParam: ''CPU'' value: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1008@242 corner: 1024@258
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(940834816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1008@240 1008@242 mouseMove 439921128 nil]
		targetOffset: 	372@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 439921128 1008 241 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(573308928) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(573308928) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1008@242 corner: 1024@258
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(940834816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1008@240 1008@242 mouseMove 439921128 nil]
		targetOffset: 	372@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 439921128 1008 241 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1008@242 corner: 1024@258
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(940834816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1008@240 1008@242 mouseMove 439921128 nil]
		targetOffset: 	372@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 439921128 1008 241 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	1008@242 corner: 1024@258
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(940834816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1008@240 1008@242 mouseMove 439921128 nil]
		targetOffset: 	372@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 439921128 1008 241 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1008@242 corner: 1024@258
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(940834816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1008@240 1008@242 mouseMove 439921128 nil]
		targetOffset: 	372@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 439921128 1008 241 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 439921474 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1008@242 corner: 1024@258
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(940834816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1008@240 1008@242 mouseMove 439921128 nil]
		targetOffset: 	372@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 439921128 1008 241 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(573308928))(a PreDebu...etc...
		lastStepTime: 	439921466
		lastStepMessage: 	nil
		lastCycleTime: 	439921508
		alarms: 	a Heap()
		lastAlarmTime: 	439921466
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #do:
WebHMIElement>>changeParam:value:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>times
21 April 2012 8:13:13 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>doesNotUnderstand: #times
	Receiver: 100
	Arguments and temporary variables: 
		aMessage: 	times
		exception: 	MessageNotUnderstood: SmallInteger>>times
		resumeValue: 	nil
	Receiver's instance variables: 
100

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '100 times do: [ :u | (WebHMIElement elements a...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(272367616)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ 100 times
		do: [:u | (WebHMIElement elements at: 3)
				ch...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(322174976)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '100 times do: [ :u | (WebHMIElement elements a...etc...
		requestor: 	a TextMorphForEditView(272367616)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442192230) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '100 times do: [ :u | (WebHMIElement elements at: 3) changePar...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '100 times do: [ :u | (WebHMIElement elements at: 3) change...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442192230) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '100 times do: [ :u | (WebHMIElement elements at: 3) changePar...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442192230) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '100 times do: [ :u | (WebHMIElement elements at: 3) changePar...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442192230) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '100 times do: [ :u | (WebHMIElement elements at: 3) changePar...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442192230) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '100 times do: [ :u | (WebHMIElement elements at: 3) changePar...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(665059328)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442192230) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '100 times do: [ :u | (WebHMIElement elements at: 3) changePar...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442192230) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '100 times do: [ :u | (WebHMIElement elements at: 3) changePar...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(272367616)
	Receiver's instance variables: 
		timeStamp: 	442190002
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	523@52
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442192230) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '100 times do: [ :u | (WebHMIElement elements at: 3) changePar...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442192230) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '100 times do: [ :u | (WebHMIElement elements at: 3) changePar...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	605@84 corner: 621@100
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(212598784)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[605@84 mouseUp 442191600 nil]
		targetOffset: 	72@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442191600 605 84 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(974127104) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(974127104) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	605@84 corner: 621@100
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(212598784)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[605@84 mouseUp 442191600 nil]
		targetOffset: 	72@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442191600 605 84 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	605@84 corner: 621@100
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(212598784)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[605@84 mouseUp 442191600 nil]
		targetOffset: 	72@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442191600 605 84 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	605@84 corner: 621@100
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(212598784)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[605@84 mouseUp 442191600 nil]
		targetOffset: 	72@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442191600 605 84 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	605@84 corner: 621@100
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(212598784)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[605@84 mouseUp 442191600 nil]
		targetOffset: 	72@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442191600 605 84 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 442190002 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	605@84 corner: 621@100
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(212598784)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[605@84 mouseUp 442191600 nil]
		targetOffset: 	72@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442191600 605 84 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(974127104))(a PreDebu...etc...
		lastStepTime: 	442191638
		lastStepMessage: 	nil
		lastCycleTime: 	442191672
		alarms: 	a Heap()
		lastAlarmTime: 	442191638
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #times
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: WebHMIElement>>sleepFor:
21 April 2012 8:17:07 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

WebHMIElement(Object)>>doesNotUnderstand: #sleepFor:
	Receiver: a WebHMIElement
	Arguments and temporary variables: 
		aMessage: 	sleepFor: 12
		exception: 	MessageNotUnderstood: WebHMIElement>>sleepFor:
		resumeValue: 	nil
	Receiver's instance variables: 
		state: 	false
		elName: 	'adminWorkstation'
		elType: 	a WebHMIElementType
		widget: 	a WebHMIWidget


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		u: 	2
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '2 to: 1000 do: [ :u | (WebHMIElement elements ...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(272367616)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ 2
		to: 1000
		do: [(WebHMIElement elements at: 3) changePa...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(219676672)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '2 to: 1000 do: [ :u | (WebHMIElement elements ...etc...
		requestor: 	a TextMorphForEditView(272367616)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442425748) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) chang...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442425748) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442425748) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442425748) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442425748) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(665059328)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442425748) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442425748) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(272367616)
	Receiver's instance variables: 
		timeStamp: 	442425148
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	491@50
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442425748) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 630@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 630@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442425748) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	723@178 corner: 739@194
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(282853376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[722@178 723@178 mouseMove 442409202 nil]
		targetOffset: 	489@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442409202 723 178 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(989069312) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(989069312) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	723@178 corner: 739@194
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(282853376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[722@178 723@178 mouseMove 442409202 nil]
		targetOffset: 	489@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442409202 723 178 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	723@178 corner: 739@194
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(282853376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[722@178 723@178 mouseMove 442409202 nil]
		targetOffset: 	489@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442409202 723 178 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	723@178 corner: 739@194
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(282853376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[722@178 723@178 mouseMove 442409202 nil]
		targetOffset: 	489@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442409202 723 178 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	723@178 corner: 739@194
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(282853376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[722@178 723@178 mouseMove 442409202 nil]
		targetOffset: 	489@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442409202 723 178 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 442425148 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	723@178 corner: 739@194
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(282853376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[722@178 723@178 mouseMove 442409202 nil]
		targetOffset: 	489@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442409202 723 178 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(989069312))(a PreDebu...etc...
		lastStepTime: 	442425138
		lastStepMessage: 	nil
		lastCycleTime: 	442425182
		alarms: 	a Heap()
		lastAlarmTime: 	442425138
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
WebHMIElement(Object)>>doesNotUnderstand: #sleepFor:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>sleepFor:
21 April 2012 8:18:02 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SmallInteger(Object)>>doesNotUnderstand: #sleepFor:
	Receiver: 2
	Arguments and temporary variables: 
		aMessage: 	sleepFor: 12
		exception: 	MessageNotUnderstood: SmallInteger>>sleepFor:
		resumeValue: 	nil
	Receiver's instance variables: 
2

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		u: 	2
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '2 to: 1000 do: [ :u | (WebHMIElement elements ...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(272367616)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ 2
		to: 1000
		do: [(WebHMIElement elements at: 3)
				chan...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(825753600)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '2 to: 1000 do: [ :u | (WebHMIElement elements ...etc...
		requestor: 	a TextMorphForEditView(272367616)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442480764) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) chang...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442480764) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442480764) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442480764) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442480764) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(665059328)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442480764) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442480764) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(272367616)
	Receiver's instance variables: 
		timeStamp: 	442480182
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	600@54
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442480764) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442480764) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: 3) changePa...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	832@182 corner: 848@198
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(266862592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@179 832@182 mouseMove 442477128 nil]
		targetOffset: 	580@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442477128 831 181 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(972554240) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(972554240) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	832@182 corner: 848@198
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(266862592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@179 832@182 mouseMove 442477128 nil]
		targetOffset: 	580@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442477128 831 181 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	832@182 corner: 848@198
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(266862592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@179 832@182 mouseMove 442477128 nil]
		targetOffset: 	580@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442477128 831 181 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	832@182 corner: 848@198
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(266862592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@179 832@182 mouseMove 442477128 nil]
		targetOffset: 	580@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442477128 831 181 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	832@182 corner: 848@198
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(266862592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@179 832@182 mouseMove 442477128 nil]
		targetOffset: 	580@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442477128 831 181 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 442480182 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	832@182 corner: 848@198
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(266862592)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[831@179 832@182 mouseMove 442477128 nil]
		targetOffset: 	580@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442477128 831 181 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(972554240))(a PreDebu...etc...
		lastStepTime: 	442480164
		lastStepMessage: 	nil
		lastCycleTime: 	442480206
		alarms: 	a Heap()
		lastAlarmTime: 	442480164
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #sleepFor:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
21 April 2012 8:26:30 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElement)
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
		array: 	an Array(nil a WebHMIElement a WebHMIElement a WebHMIElement a WebHMIEle...etc...
		firstIndex: 	3
		lastIndex: 	5


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElement)
	Arguments and temporary variables: 
		fromIndex: 	0
		toIndex: 	0
	Receiver's instance variables: 
		array: 	an Array(nil a WebHMIElement a WebHMIElement a WebHMIElement a WebHMIEle...etc...
		firstIndex: 	3
		lastIndex: 	5


OrderedCollection>>at:
	Receiver: an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElement)
	Arguments and temporary variables: 
		anInteger: 	0
	Receiver's instance variables: 
		array: 	an Array(nil a WebHMIElement a WebHMIElement a WebHMIElement a WebHMIEle...etc...
		firstIndex: 	3
		lastIndex: 	5


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		u: 	3
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '2 to: 1000 do: [ :u | (WebHMIElement elements ...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(272367616)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ 2
		to: 1000
		do: [(WebHMIElement elements at: u \\ 3)
			...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(394788864)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '2 to: 1000 do: [ :u | (WebHMIElement elements ...etc...
		requestor: 	a TextMorphForEditView(272367616)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442989364) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3) cha...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3) ...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442989364) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3) cha...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442989364) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3) cha...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442989364) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3) cha...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442989364) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3) cha...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(665059328)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442989364) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3) cha...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442989364) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3) cha...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(272367616)
	Receiver's instance variables: 
		timeStamp: 	442988760
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	365@125
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442989364) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3) cha...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 442989364) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3) cha...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	472@281 corner: 488@297
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(304611328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[597@253 472@281 mouseMove CTRL 442988762 nil]
		targetOffset: 	698@64
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442988762 537 267 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1003225088) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1003225088) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	472@281 corner: 488@297
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(304611328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[597@253 472@281 mouseMove CTRL 442988762 nil]
		targetOffset: 	698@64
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442988762 537 267 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	472@281 corner: 488@297
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(304611328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[597@253 472@281 mouseMove CTRL 442988762 nil]
		targetOffset: 	698@64
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442988762 537 267 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	472@281 corner: 488@297
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(304611328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[597@253 472@281 mouseMove CTRL 442988762 nil]
		targetOffset: 	698@64
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442988762 537 267 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	472@281 corner: 488@297
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(304611328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[597@253 472@281 mouseMove CTRL 442988762 nil]
		targetOffset: 	698@64
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442988762 537 267 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 442988760 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	472@281 corner: 488@297
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(304611328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[597@253 472@281 mouseMove CTRL 442988762 nil]
		targetOffset: 	698@64
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 442988762 537 267 0 2 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: WebSocket07>>wait
21 April 2012 8:29:56 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

WebSocket07(Object)>>doesNotUnderstand: #wait
	Receiver: WebSocket07(127.0.0.1:50182)
	Arguments and temporary variables: 
		aMessage: 	wait
		exception: 	MessageNotUnderstood: WebSocket07>>wait
		resumeValue: 	nil
	Receiver's instance variables: 
		name: 	'127.0.0.1:50182'
		process: 	a Process in [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore ...etc...
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[Transcript cr; show: 'Closing ' , ws.
	mutex
	...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	true


[:s | s send: '@paramChange (HMIelement getElement: ' , $' , self elName , $' , ') changeParam: ' , $' , aParam , $' , ' pValue: ' , $' , aParam , ' = ' , aValue , $';
		 wait] in [WebHMIServer sockets
		do: [:s | s send: '@paramChange (HMIelement getElement: ' , $' , self elName , $' , ') changeParam: ' , $' , aParam , $' , ' pValue: ' , $' , aParam , ' = ' , aValue , $';
				 wait]] in [:p | p pName = aParam
		ifTrue: [p pValue: aValue.
			WebHMIServer mutex
				critical: [WebHMIServer sockets
						do: [:s | s send: '@paramChange (HMIelement getElement: ' , $' , self elName , $' , ') changeParam: ' , $' , aParam , $' , ' pValue: ' , $' , aParam , ' = ' , aValue , $';
								 wait]]]] in WebHMIElement>>changeParam:value:
	Receiver: a WebHMIElement
	Arguments and temporary variables: 
		aParam: 	WebSocket07(127.0.0.1:50182)
		aValue: 	'CPU'
		s: 	2
	Receiver's instance variables: 
		state: 	false
		elName: 	'adminWorkstation'
		elType: 	a WebHMIElementType
		widget: 	a WebHMIWidget


OrderedCollection>>do:
	Receiver: an OrderedCollection(WebSocket07(127.0.0.1:50182))
	Arguments and temporary variables: 
		aBlock: 	[:s | s send: '@paramChange (HMIelement getElement: ' , $' , self elNam...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil WebSocket07(127.0.0.1:50182) nil nil nil nil nil nil ni...etc...
		firstIndex: 	3
		lastIndex: 	3


[WebHMIServer sockets
		do: [:s | s send: '@paramChange (HMIelement getElement: ' , $' , self elName , $' , ') changeParam: ' , $' , aParam , $' , ' pValue: ' , $' , aParam , ' = ' , aValue , $';
				 wait]] in [:p | p pName = aParam
		ifTrue: [p pValue: aValue.
			WebHMIServer mutex
				critical: [WebHMIServer sockets
						do: [:s | s send: '@paramChange (HMIelement getElement: ' , $' , self elName , $' , ') changeParam: ' , $' , aParam , $' , ' pValue: ' , $' , aParam , ' = ' , aValue , $';
								 wait]]]] in WebHMIElement>>changeParam:value:
	Receiver: a WebHMIElement
	Arguments and temporary variables: 
		aParam: 	'CPU'
		aValue: 	2
	Receiver's instance variables: 
		state: 	false
		elName: 	'adminWorkstation'
		elType: 	a WebHMIElementType
		widget: 	a WebHMIWidget


BlockClosure>>ensure:
	Receiver: [WebHMIServer sockets
		do: [:s | s send: '@paramChange (HMIelement getElement: ' , $' , s...etc...
	Arguments and temporary variables: 
		aBlock: 	[owner := nil]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[:p | p pName = aParam
		ifTrue: [p pValue: aValue.
			WebHMIServ...etc...
		startpc: 	113
		numArgs: 	0


[owner := activeProcess.
	aBlock
		ensure: [owner := nil]] in Mutex>>critical:
	Receiver: a Mutex
	Arguments and temporary variables: 
		aBlock: 	[WebHMIServer sockets
		do: [:s | s send: '@paramChange (HMIelement get...etc...
		activeProcess: 	a Process in MorphicUIManager>>openDebuggerOn:context:label:cont...etc...
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		owner: 	a Process in MorphicUIManager>>openDebuggerOn:context:label:contents:ful...etc...


[caught := true.
	self wait.
	blockValue := mutuallyExcludedBlock value] in Semaphore>>critical:
	Receiver: a Semaphore()
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		firstLink: 	nil
		lastLink: 	nil
		excessSignals: 	0


BlockClosure>>ensure:
	Receiver: [caught := true.
	self wait.
	blockValue := mutuallyExcludedBlock value]
	Arguments and temporary variables: 
		aBlock: 	[caught
		ifTrue: [self signal]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Semaphore>>critical:
		startpc: 	42
		numArgs: 	0


Semaphore>>critical:
	Receiver: a Semaphore()
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		firstLink: 	nil
		lastLink: 	nil
		excessSignals: 	0


Mutex>>critical:
	Receiver: a Mutex
	Arguments and temporary variables: 
		aBlock: 	[WebHMIServer sockets
		do: [:s | s send: '@paramChange (HMIelement get...etc...
		activeProcess: 	a Process in MorphicUIManager>>openDebuggerOn:context:label:cont...etc...
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		owner: 	a Process in MorphicUIManager>>openDebuggerOn:context:label:contents:ful...etc...


[:p | p pName = aParam
		ifTrue: [p pValue: aValue.
			WebHMIServer mutex
				critical: [WebHMIServer sockets
						do: [:s | s send: '@paramChange (HMIelement getElement: ' , $' , self elName , $' , ') changeParam: ' , $' , aParam , $' , ' pValue: ' , $' , aParam , ' = ' , aValue , $';
								 wait]]]] in WebHMIElement>>changeParam:value:
	Receiver: a WebHMIElement
	Arguments and temporary variables: 
		aParam: 	a WebHMIWidgetParam
		aValue: 	'CPU'
		p: 	2
	Receiver's instance variables: 
		state: 	false
		elName: 	'adminWorkstation'
		elType: 	a WebHMIElementType
		widget: 	a WebHMIWidget


OrderedCollection>>do:
	Receiver: an OrderedCollection(a WebHMIWidgetParam)
	Arguments and temporary variables: 
		aBlock: 	[:p | p pName = aParam
		ifTrue: [p pValue: aValue.
			WebHMIServer mut...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil a WebHMIWidgetParam nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


WebHMIElement>>changeParam:value:
	Receiver: a WebHMIElement
	Arguments and temporary variables: 
		aParam: 	'CPU'
		aValue: 	2
	Receiver's instance variables: 
		state: 	false
		elName: 	'adminWorkstation'
		elType: 	a WebHMIElementType
		widget: 	a WebHMIWidget


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		u: 	2
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '2 to: 1000 do: [ :u | (WebHMIElement elements ...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(272367616)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ 2
		to: 1000
		do: [(WebHMIElement elements at: u \\ 3 + 1)...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(608960512)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '2 to: 1000 do: [ :u | (WebHMIElement elements ...etc...
		requestor: 	a TextMorphForEditView(272367616)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 443195084) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3 + 1)...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3 +...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 443195084) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3 + 1)...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 443195084) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3 + 1)...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 443195084) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3 + 1)...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 443195084) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3 + 1)...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(665059328)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 443195084) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3 + 1)...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 443195084) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3 + 1)...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(272367616)
	Receiver's instance variables: 
		timeStamp: 	443194488
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	-221@92
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@18
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@18
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 443195084) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '2 to: 1000 do: [ :u | (WebHMIElement elements at: u \\ 3 + 1)...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
WebSocket07(Object)>>doesNotUnderstand: #wait
[:s | s send: '@paramChange (HMIelement getElement: ' , $' , self elName , $' , ') changeParam: ' , $' , aParam , $' , ' pValue: ' , $' , aParam , ' = ' , aValue , $';
		 wait] in [WebHMIServer sockets
		do: [:s | s send: '@paramChange (HMIelement getElement: ' , $' , self elName , $' , ') changeParam: ' , $' , aParam , $' , ' pValue: ' , $' , aParam , ' = ' , aValue , $';
				 wait]] in [:p | p pName = aParam
		ifTrue: [p pValue: aValue.
			WebHMIServer mutex
				critical: [WebHMIServer sockets
						do: [:s | s send: '@paramChange (HMIelement getElement: ' , $' , self elName , $' , ') changeParam: ' , $' , aParam , $' , ' pValue: ' , $' , aParam , ' = ' , aValue , $';
								 wait]]]] in WebHMIElement>>changeParam:value:
OrderedCollection>>do:
[WebHMIServer sockets
		do: [:s | s send: '@paramChange (HMIelement getElement: ' , $' , self elName , $' , ') changeParam: ' , $' , aParam , $' , ' pValue: ' , $' , aParam , ' = ' , aValue , $';
				 wait]] in [:p | p pName = aParam
		ifTrue: [p pValue: aValue.
			WebHMIServer mutex
				critical: [WebHMIServer sockets
						do: [:s | s send: '@paramChange (HMIelement getElement: ' , $' , self elName , $' , ') changeParam: ' , $' , aParam , $' , ' pValue: ' , $' , aParam , ' = ' , aValue , $';
								 wait]]]] in WebHMIElement>>changeParam:value:
BlockClosure>>ensure:
[owner := activeProcess.
	aBlock
		ensure: [owner := nil]] in Mutex>>critical:
[caught := true.
	self wait.
	blockValue := mutuallyExcludedBlock value] in Semaphore>>critical:
BlockClosure>>ensure:
Semaphore>>critical:
Mutex>>critical:
[:p | p pName = aParam
		ifTrue: [p pValue: aValue.
			WebHMIServer mutex
				critical: [WebHMIServer sockets
						do: [:s | s send: '@paramChange (HMIelement getElement: ' , $' , self elName , $' , ') changeParam: ' , $' , aParam , $' , ' pValue: ' , $' , aParam , ' = ' , aValue , $';
								 wait]]]] in WebHMIElement>>changeParam:value:
OrderedCollection>>do:
WebHMIElement>>changeParam:value:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: WebHMIElement class>>widget
21 April 2012 8:44:07 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

WebHMIElement class(Object)>>doesNotUnderstand: #widget
	Receiver: WebHMIElement
	Arguments and temporary variables: 
		aMessage: 	widget
		exception: 	MessageNotUnderstood: WebHMIElement class>>widget
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeParam:value:->(WebHMIElement>>#changePara...etc...
		format: 	138
		instanceVariables: 	#('state' 'elName' 'elType' 'widget')
		organization: 	('as yet unclassified' changeParam:value: elName elName: elType e...etc...
		subclasses: 	nil
		name: 	#WebHMIElement
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#WebHMI
		traitComposition: 	nil
		localSelectors: 	nil
		collection: 	an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElemen...etc...


WebHMIElement class>>DoIt
	Receiver: WebHMIElement
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeParam:value:->(WebHMIElement>>#changePara...etc...
		format: 	138
		instanceVariables: 	#('state' 'elName' 'elType' 'widget')
		organization: 	('as yet unclassified' changeParam:value: elName elName: elType e...etc...
		subclasses: 	nil
		name: 	#WebHMIElement
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#WebHMI
		traitComposition: 	nil
		localSelectors: 	nil
		collection: 	an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElemen...etc...


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'params
	^ self widget params
		do:
			[ :p | 
...etc...
		aContext: 	nil
		receiver: 	WebHMIElement
		aRequestor: 	an OBTextMorph(928251904)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ self widget params do: [:p | '(HMIelement getElement: ' , $...etc...
		method: 	(WebHMIElement class>>#DoIt "a CompiledMethod(308543488)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'params
	^ self widget params
		do:
			[ :p | 
...etc...
		requestor: 	an OBTextMorph(928251904)
		class: 	WebHMIElement class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	WebHMIElement
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(928251904)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	WebHMIElement
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(928251904)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 277)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 277)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorph(TextMorph)>>handleEdit:
	Receiver: an OBTextMorph(928251904)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1335@98
		owner: 	a TransformMorph(1069547520)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1335@98
		color: 	Color black
		extension: 	a MorphExtension (1008467968) [other:  (blinkStart -> 444041866) (my...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'params
	^ self widget params
		do:
			[ :p | 
			''(HMIelemen...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	an OBPluggableTextMorph(1022623744)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 277)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 277)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorphSelection>>inspectIt
	Receiver: an OBTextMorphSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		selection: 	(11 to: 277)
		text: 	a Text for 'params
	^ self widget params
		do:
			[ :p | 
			''(HMIelemen...etc...
		morph: 	an OBPluggableTextMorph(1022623744)


OBInspectItTextCommand>>execute
	Receiver: an OBInspectItTextCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


OBInspectItTextCommand(OBCommand)>>perform:orSendTo:
	Receiver: an OBInspectItTextCommand
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableTextMorph(1022623744)
	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(796393472)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[702@564 mouseUp 444045134 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	627@550 corner: 824@568
		owner: 	a MenuMorph(475004928)
		submorphs: 	#()
		fullBounds: 	627@550 corner: 824@568
		color: 	Color black
		extension: 	a MorphExtension (806617088)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(796393472)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[702@564 mouseUp 444045134 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	627@550 corner: 824@568
		owner: 	a MenuMorph(475004928)
		submorphs: 	#()
		fullBounds: 	627@550 corner: 824@568
		color: 	Color black
		extension: 	a MorphExtension (806617088)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(796393472)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[702@564 mouseUp 444045134 nil]
	Receiver's instance variables: 
		bounds: 	627@550 corner: 824@568
		owner: 	a MenuMorph(475004928)
		submorphs: 	#()
		fullBounds: 	627@550 corner: 824@568
		color: 	Color black
		extension: 	a MorphExtension (806617088)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(796393472)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
	Receiver's instance variables: 
		bounds: 	627@550 corner: 824@568
		owner: 	a MenuMorph(475004928)
		submorphs: 	#()
		fullBounds: 	627@550 corner: 824@568
		color: 	Color black
		extension: 	a MorphExtension (806617088)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MouseButtonEvent>>sentTo:
	Receiver: [702@564 mouseUp 444045134 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(796393472)'Inspect it'
	Receiver's instance variables: 
		timeStamp: 	444045134
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	702@564
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(796393472)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
	Receiver's instance variables: 
		bounds: 	627@550 corner: 824@568
		owner: 	a MenuMorph(475004928)
		submorphs: 	#()
		fullBounds: 	627@550 corner: 824@568
		color: 	Color black
		extension: 	a MorphExtension (806617088)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
		aMorph: 	a ToggleMenuItemMorph(796393472)'Inspect it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
		aMorph: 	a ToggleMenuItemMorph(796393472)'Inspect it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(796393472)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	627@550 corner: 824@568
		owner: 	a MenuMorph(475004928)
		submorphs: 	#()
		fullBounds: 	627@550 corner: 824@568
		color: 	Color black
		extension: 	a MorphExtension (806617088)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
		aMorph: 	a MenuMorph(475004928)
		localEvt: 	[702@564 mouseUp 444045134 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(796393472)'Inspect it'
		morphs: 	an Array(a ToggleMenuItemMorph(384303104)'Redo' a ToggleMenuItemMorph(5...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
		aMorph: 	a MenuMorph(475004928)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(475004928)
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	622@343 corner: 829@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(384303104)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	622@343 corner: 829@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (489947136) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(796393472)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(384303104)'Redo' a Toggle...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(475004928)
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
	Receiver's instance variables: 
		bounds: 	622@343 corner: 829@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(384303104)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	622@343 corner: 829@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (489947136) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(796393472)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(384303104)'Redo' a Toggle...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(475004928)
	Arguments and temporary variables: 
		evt: 	[702@564 mouseUp 444045134 nil]
	Receiver's instance variables: 
		bounds: 	622@343 corner: 829@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(384303104)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	622@343 corner: 829@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (489947136) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(796393472)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(384303104)'Redo' a Toggle...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
		focusHolder: 	a MenuMorph(475004928)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	702@564 corner: 718@580
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(128188416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[702@564 mouseUp 444045134 nil]
		targetOffset: 	75@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444045134 702 564 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(322961408) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[702@564 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(322961408) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
		focusHolder: 	a MenuMorph(475004928)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	702@564 corner: 718@580
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(128188416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[702@564 mouseUp 444045134 nil]
		targetOffset: 	75@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444045134 702 564 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
		focusHolder: 	a MenuMorph(475004928)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	702@564 corner: 718@580
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(128188416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[702@564 mouseUp 444045134 nil]
		targetOffset: 	75@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444045134 702 564 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
	Receiver's instance variables: 
		bounds: 	702@564 corner: 718@580
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(128188416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[702@564 mouseUp 444045134 nil]
		targetOffset: 	75@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444045134 702 564 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[702@564 mouseUp 444045134 nil]
		evt: 	[702@564 mouseUp 444045134 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	702@564 corner: 718@580
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(128188416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[702@564 mouseUp 444045134 nil]
		targetOffset: 	75@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444045134 702 564 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[702@564 mouseUp 444045134 nil]
		evtBuf: 	#(1 444045134 702 564 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	702@564 corner: 718@580
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(128188416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[702@564 mouseUp 444045134 nil]
		targetOffset: 	75@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444045134 702 564 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil



--- The full stack ---
WebHMIElement class(Object)>>doesNotUnderstand: #widget
WebHMIElement class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBTextMorph(TextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
OBTextMorphSelection>>inspectIt
OBInspectItTextCommand>>execute
OBInspectItTextCommand(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
OBTextMorph(TextMorphForEditView)>>mouseDown:
OBTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBGroupingMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: WebHMIElement class>>widget
21 April 2012 8:44:51 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

WebHMIElement class(Object)>>doesNotUnderstand: #widget
	Receiver: WebHMIElement
	Arguments and temporary variables: 
		aMessage: 	widget
		exception: 	MessageNotUnderstood: WebHMIElement class>>widget
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeParam:value:->(WebHMIElement>>#changePara...etc...
		format: 	138
		instanceVariables: 	#('state' 'elName' 'elType' 'widget')
		organization: 	('as yet unclassified' changeParam:value: elName elName: elType e...etc...
		subclasses: 	nil
		name: 	#WebHMIElement
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#WebHMI
		traitComposition: 	nil
		localSelectors: 	nil
		collection: 	an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElemen...etc...


WebHMIElement class>>DoIt
	Receiver: WebHMIElement
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeParam:value:->(WebHMIElement>>#changePara...etc...
		format: 	138
		instanceVariables: 	#('state' 'elName' 'elType' 'widget')
		organization: 	('as yet unclassified' changeParam:value: elName elName: elType e...etc...
		subclasses: 	nil
		name: 	#WebHMIElement
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#WebHMI
		traitComposition: 	nil
		localSelectors: 	nil
		collection: 	an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElemen...etc...


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'params
	^ (self widget params
		do:
			[ :p | ...etc...
		aContext: 	nil
		receiver: 	WebHMIElement
		aRequestor: 	an OBTextMorph(928251904)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ self widget params do: [:p | '(HMIelement getElement: ' , $...etc...
		method: 	(WebHMIElement class>>#DoIt "a CompiledMethod(444334080)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'params
	^ (self widget params
		do:
			[ :p | ...etc...
		requestor: 	an OBTextMorph(928251904)
		class: 	WebHMIElement class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	WebHMIElement
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(928251904)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	WebHMIElement
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(928251904)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 279)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 279)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorph(TextMorph)>>handleEdit:
	Receiver: an OBTextMorph(928251904)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1335@98
		owner: 	a TransformMorph(1069547520)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1335@98
		color: 	Color black
		extension: 	a MorphExtension (1008467968) [other:  (blinkStart -> 444088054) (my...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'params
	^ (self widget params
		do:
			[ :p | 
			''(HMIeleme...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	an OBPluggableTextMorph(1022623744)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 279)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 279)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorphSelection>>inspectIt
	Receiver: an OBTextMorphSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		selection: 	(11 to: 279)
		text: 	a Text for 'params
	^ (self widget params
		do:
			[ :p | 
			''(HMIeleme...etc...
		morph: 	an OBPluggableTextMorph(1022623744)


OBInspectItTextCommand>>execute
	Receiver: an OBInspectItTextCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


OBInspectItTextCommand(OBCommand)>>perform:orSendTo:
	Receiver: an OBInspectItTextCommand
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableTextMorph(1022623744)
	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(684720128)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[116@554 mouseUp 444089369 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	58@550 corner: 255@568
		owner: 	a MenuMorph(125304832)
		submorphs: 	#()
		fullBounds: 	58@550 corner: 255@568
		color: 	Color black
		extension: 	a MorphExtension (694943744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(684720128)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[116@554 mouseUp 444089369 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	58@550 corner: 255@568
		owner: 	a MenuMorph(125304832)
		submorphs: 	#()
		fullBounds: 	58@550 corner: 255@568
		color: 	Color black
		extension: 	a MorphExtension (694943744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(684720128)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[116@554 mouseUp 444089369 nil]
	Receiver's instance variables: 
		bounds: 	58@550 corner: 255@568
		owner: 	a MenuMorph(125304832)
		submorphs: 	#()
		fullBounds: 	58@550 corner: 255@568
		color: 	Color black
		extension: 	a MorphExtension (694943744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(684720128)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
	Receiver's instance variables: 
		bounds: 	58@550 corner: 255@568
		owner: 	a MenuMorph(125304832)
		submorphs: 	#()
		fullBounds: 	58@550 corner: 255@568
		color: 	Color black
		extension: 	a MorphExtension (694943744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MouseButtonEvent>>sentTo:
	Receiver: [116@554 mouseUp 444089369 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(684720128)'Inspect it'
	Receiver's instance variables: 
		timeStamp: 	444089369
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	116@554
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(684720128)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
	Receiver's instance variables: 
		bounds: 	58@550 corner: 255@568
		owner: 	a MenuMorph(125304832)
		submorphs: 	#()
		fullBounds: 	58@550 corner: 255@568
		color: 	Color black
		extension: 	a MorphExtension (694943744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
		aMorph: 	a ToggleMenuItemMorph(684720128)'Inspect it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
		aMorph: 	a ToggleMenuItemMorph(684720128)'Inspect it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(684720128)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	58@550 corner: 255@568
		owner: 	a MenuMorph(125304832)
		submorphs: 	#()
		fullBounds: 	58@550 corner: 255@568
		color: 	Color black
		extension: 	a MorphExtension (694943744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
		aMorph: 	a MenuMorph(125304832)
		localEvt: 	[116@554 mouseUp 444089369 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(684720128)'Inspect it'
		morphs: 	an Array(a ToggleMenuItemMorph(34603008)'Redo' a ToggleMenuItemMorph(18...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
		aMorph: 	a MenuMorph(125304832)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(125304832)
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	53@343 corner: 260@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(34603008)'Redo' a ToggleMenuItemMorph...etc...
		fullBounds: 	53@343 corner: 260@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (140247040) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(684720128)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(34603008)'Redo' a ToggleM...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(125304832)
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
	Receiver's instance variables: 
		bounds: 	53@343 corner: 260@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(34603008)'Redo' a ToggleMenuItemMorph...etc...
		fullBounds: 	53@343 corner: 260@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (140247040) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(684720128)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(34603008)'Redo' a ToggleM...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(125304832)
	Arguments and temporary variables: 
		evt: 	[116@554 mouseUp 444089369 nil]
	Receiver's instance variables: 
		bounds: 	53@343 corner: 260@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(34603008)'Redo' a ToggleMenuItemMorph...etc...
		fullBounds: 	53@343 corner: 260@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (140247040) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(684720128)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(34603008)'Redo' a ToggleM...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
		focusHolder: 	a MenuMorph(125304832)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	116@554 corner: 132@570
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	116@554 corner: 132@570
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1066663936)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[116@554 mouseUp 444089369 nil]
		targetOffset: 	58@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444089369 116 554 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(753926144) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[116@554 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(753926144) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
		focusHolder: 	a MenuMorph(125304832)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	116@554 corner: 132@570
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	116@554 corner: 132@570
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1066663936)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[116@554 mouseUp 444089369 nil]
		targetOffset: 	58@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444089369 116 554 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
		focusHolder: 	a MenuMorph(125304832)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	116@554 corner: 132@570
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	116@554 corner: 132@570
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1066663936)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[116@554 mouseUp 444089369 nil]
		targetOffset: 	58@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444089369 116 554 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
	Receiver's instance variables: 
		bounds: 	116@554 corner: 132@570
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	116@554 corner: 132@570
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1066663936)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[116@554 mouseUp 444089369 nil]
		targetOffset: 	58@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444089369 116 554 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[116@554 mouseUp 444089369 nil]
		evt: 	[116@554 mouseUp 444089369 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	116@554 corner: 132@570
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	116@554 corner: 132@570
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1066663936)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[116@554 mouseUp 444089369 nil]
		targetOffset: 	58@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444089369 116 554 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[116@554 mouseUp 444089369 nil]
		evtBuf: 	#(1 444089369 116 554 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	116@554 corner: 132@570
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	116@554 corner: 132@570
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1066663936)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[116@554 mouseUp 444089369 nil]
		targetOffset: 	58@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444089369 116 554 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil



--- The full stack ---
WebHMIElement class(Object)>>doesNotUnderstand: #widget
WebHMIElement class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBTextMorph(TextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
OBTextMorphSelection>>inspectIt
OBInspectItTextCommand>>execute
OBInspectItTextCommand(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
OBTextMorph(TextMorphForEditView)>>mouseDown:
OBTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBGroupingMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: WebHMIElement class>>widget
21 April 2012 8:45:58 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

WebHMIElement class(Object)>>doesNotUnderstand: #widget
	Receiver: WebHMIElement
	Arguments and temporary variables: 
		aMessage: 	widget
		exception: 	MessageNotUnderstood: WebHMIElement class>>widget
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeParam:value:->(WebHMIElement>>#changePara...etc...
		format: 	138
		instanceVariables: 	#('state' 'elName' 'elType' 'widget')
		organization: 	('as yet unclassified' changeParam:value: elName elName: elType e...etc...
		subclasses: 	nil
		name: 	#WebHMIElement
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#WebHMI
		traitComposition: 	nil
		localSelectors: 	nil
		collection: 	an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElemen...etc...


WebHMIElement class>>DoIt
	Receiver: WebHMIElement
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeParam:value:->(WebHMIElement>>#changePara...etc...
		format: 	138
		instanceVariables: 	#('state' 'elName' 'elType' 'widget')
		organization: 	('as yet unclassified' changeParam:value: elName elName: elType e...etc...
		subclasses: 	nil
		name: 	#WebHMIElement
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#WebHMI
		traitComposition: 	nil
		localSelectors: 	nil
		collection: 	an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElemen...etc...


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'params
	^ (self widget) params
		do:
			[ :p |...etc...
		aContext: 	nil
		receiver: 	WebHMIElement
		aRequestor: 	an OBTextMorph(928251904)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ self widget params do: [:p | '(HMIelement getElement: ' , $...etc...
		method: 	(WebHMIElement class>>#DoIt "a CompiledMethod(607649792)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'params
	^ (self widget) params
		do:
			[ :p |...etc...
		requestor: 	an OBTextMorph(928251904)
		class: 	WebHMIElement class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	WebHMIElement
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(928251904)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	WebHMIElement
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(928251904)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 279)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 279)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorph(TextMorph)>>handleEdit:
	Receiver: an OBTextMorph(928251904)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1335@98
		owner: 	a TransformMorph(1069547520)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1335@98
		color: 	Color black
		extension: 	a MorphExtension (1008467968) [other:  (blinkStart -> 444153040) (my...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'params
	^ (self widget) params
		do:
			[ :p | 
			''(HMIelem...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	an OBPluggableTextMorph(1022623744)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 279)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 279)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorphSelection>>inspectIt
	Receiver: an OBTextMorphSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		selection: 	(11 to: 279)
		text: 	a Text for 'params
	^ (self widget) params
		do:
			[ :p | 
			''(HMIelem...etc...
		morph: 	an OBPluggableTextMorph(1022623744)


OBInspectItTextCommand>>execute
	Receiver: an OBInspectItTextCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


OBInspectItTextCommand(OBCommand)>>perform:orSendTo:
	Receiver: an OBInspectItTextCommand
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableTextMorph(1022623744)
	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(914096128)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[141@559 mouseUp 444156142 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	84@550 corner: 281@568
		owner: 	a MenuMorph(1009254400)
		submorphs: 	#()
		fullBounds: 	84@550 corner: 281@568
		color: 	Color black
		extension: 	a MorphExtension (924319744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(914096128)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[141@559 mouseUp 444156142 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	84@550 corner: 281@568
		owner: 	a MenuMorph(1009254400)
		submorphs: 	#()
		fullBounds: 	84@550 corner: 281@568
		color: 	Color black
		extension: 	a MorphExtension (924319744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(914096128)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[141@559 mouseUp 444156142 nil]
	Receiver's instance variables: 
		bounds: 	84@550 corner: 281@568
		owner: 	a MenuMorph(1009254400)
		submorphs: 	#()
		fullBounds: 	84@550 corner: 281@568
		color: 	Color black
		extension: 	a MorphExtension (924319744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(914096128)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
	Receiver's instance variables: 
		bounds: 	84@550 corner: 281@568
		owner: 	a MenuMorph(1009254400)
		submorphs: 	#()
		fullBounds: 	84@550 corner: 281@568
		color: 	Color black
		extension: 	a MorphExtension (924319744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MouseButtonEvent>>sentTo:
	Receiver: [141@559 mouseUp 444156142 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(914096128)'Inspect it'
	Receiver's instance variables: 
		timeStamp: 	444156142
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	141@559
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(914096128)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
	Receiver's instance variables: 
		bounds: 	84@550 corner: 281@568
		owner: 	a MenuMorph(1009254400)
		submorphs: 	#()
		fullBounds: 	84@550 corner: 281@568
		color: 	Color black
		extension: 	a MorphExtension (924319744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
		aMorph: 	a ToggleMenuItemMorph(914096128)'Inspect it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
		aMorph: 	a ToggleMenuItemMorph(914096128)'Inspect it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(914096128)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	84@550 corner: 281@568
		owner: 	a MenuMorph(1009254400)
		submorphs: 	#()
		fullBounds: 	84@550 corner: 281@568
		color: 	Color black
		extension: 	a MorphExtension (924319744)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
		aMorph: 	a MenuMorph(1009254400)
		localEvt: 	[141@559 mouseUp 444156142 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(914096128)'Inspect it'
		morphs: 	an Array(a ToggleMenuItemMorph(918552576)'Redo' a ToggleMenuItemMorph(1...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
		aMorph: 	a MenuMorph(1009254400)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1009254400)
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	79@343 corner: 286@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(918552576)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	79@343 corner: 286@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1024196608) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(914096128)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(918552576)'Redo' a Toggle...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1009254400)
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
	Receiver's instance variables: 
		bounds: 	79@343 corner: 286@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(918552576)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	79@343 corner: 286@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1024196608) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(914096128)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(918552576)'Redo' a Toggle...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1009254400)
	Arguments and temporary variables: 
		evt: 	[141@559 mouseUp 444156142 nil]
	Receiver's instance variables: 
		bounds: 	79@343 corner: 286@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(918552576)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	79@343 corner: 286@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1024196608) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(914096128)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(918552576)'Redo' a Toggle...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
		focusHolder: 	a MenuMorph(1009254400)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	141@559 corner: 157@575
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	141@559 corner: 157@575
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(667418624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[141@559 mouseUp 444156142 nil]
		targetOffset: 	57@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444156142 141 559 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(354680832) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[141@559 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(354680832) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
		focusHolder: 	a MenuMorph(1009254400)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	141@559 corner: 157@575
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	141@559 corner: 157@575
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(667418624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[141@559 mouseUp 444156142 nil]
		targetOffset: 	57@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444156142 141 559 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
		focusHolder: 	a MenuMorph(1009254400)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	141@559 corner: 157@575
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	141@559 corner: 157@575
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(667418624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[141@559 mouseUp 444156142 nil]
		targetOffset: 	57@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444156142 141 559 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
	Receiver's instance variables: 
		bounds: 	141@559 corner: 157@575
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	141@559 corner: 157@575
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(667418624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[141@559 mouseUp 444156142 nil]
		targetOffset: 	57@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444156142 141 559 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[141@559 mouseUp 444156142 nil]
		evt: 	[141@559 mouseUp 444156142 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	141@559 corner: 157@575
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	141@559 corner: 157@575
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(667418624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[141@559 mouseUp 444156142 nil]
		targetOffset: 	57@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444156142 141 559 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[141@559 mouseUp 444156142 nil]
		evtBuf: 	#(1 444156142 141 559 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	141@559 corner: 157@575
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	141@559 corner: 157@575
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(667418624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[141@559 mouseUp 444156142 nil]
		targetOffset: 	57@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444156142 141 559 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil



--- The full stack ---
WebHMIElement class(Object)>>doesNotUnderstand: #widget
WebHMIElement class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBTextMorph(TextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
OBTextMorphSelection>>inspectIt
OBInspectItTextCommand>>execute
OBInspectItTextCommand(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
OBTextMorph(TextMorphForEditView)>>mouseDown:
OBTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBGroupingMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: WebHMIElement class>>widget
21 April 2012 8:46:54 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

WebHMIElement class(Object)>>doesNotUnderstand: #widget
	Receiver: WebHMIElement
	Arguments and temporary variables: 
		aMessage: 	widget
		exception: 	MessageNotUnderstood: WebHMIElement class>>widget
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeParam:value:->(WebHMIElement>>#changePara...etc...
		format: 	138
		instanceVariables: 	#('state' 'elName' 'elType' 'widget')
		organization: 	('as yet unclassified' changeParam:value: elName elName: elType e...etc...
		subclasses: 	nil
		name: 	#WebHMIElement
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#WebHMI
		traitComposition: 	nil
		localSelectors: 	nil
		collection: 	an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElemen...etc...


WebHMIElement class>>DoIt
	Receiver: WebHMIElement
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeParam:value:->(WebHMIElement>>#changePara...etc...
		format: 	138
		instanceVariables: 	#('state' 'elName' 'elType' 'widget')
		organization: 	('as yet unclassified' changeParam:value: elName elName: elType e...etc...
		subclasses: 	nil
		name: 	#WebHMIElement
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#WebHMI
		traitComposition: 	nil
		localSelectors: 	nil
		collection: 	an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElemen...etc...


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'params
	^ self widget '
		aContext: 	nil
		receiver: 	WebHMIElement
		aRequestor: 	an OBTextMorph(928251904)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ self widget
		method: 	(WebHMIElement class>>#DoIt "a CompiledMethod(203685888)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'params
	^ self widget '
		requestor: 	an OBTextMorph(928251904)
		class: 	WebHMIElement class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	WebHMIElement
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(928251904)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	WebHMIElement
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(928251904)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorph(TextMorph)>>handleEdit:
	Receiver: an OBTextMorph(928251904)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1335@98
		owner: 	a TransformMorph(1069547520)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1335@98
		color: 	Color black
		extension: 	a MorphExtension (1008467968) [other:  (blinkStart -> 444211710) (my...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'params
	^ self widget params
		do:
			[ :p | 
			''(HMIelemen...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	an OBPluggableTextMorph(1022623744)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorphSelection>>inspectIt
	Receiver: an OBTextMorphSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		selection: 	(11 to: 22)
		text: 	a Text for 'params
	^ self widget params
		do:
			[ :p | 
			''(HMIelemen...etc...
		morph: 	an OBPluggableTextMorph(1022623744)


OBInspectItTextCommand>>execute
	Receiver: an OBInspectItTextCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


OBInspectItTextCommand(OBCommand)>>perform:orSendTo:
	Receiver: an OBInspectItTextCommand
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableTextMorph(1022623744)
	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(293601280)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[159@558 mouseUp 444212654 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	110@550 corner: 307@568
		owner: 	a MenuMorph(644087808)
		submorphs: 	#()
		fullBounds: 	110@550 corner: 307@568
		color: 	Color black
		extension: 	a MorphExtension (303824896)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(293601280)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[159@558 mouseUp 444212654 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	110@550 corner: 307@568
		owner: 	a MenuMorph(644087808)
		submorphs: 	#()
		fullBounds: 	110@550 corner: 307@568
		color: 	Color black
		extension: 	a MorphExtension (303824896)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(293601280)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[159@558 mouseUp 444212654 nil]
	Receiver's instance variables: 
		bounds: 	110@550 corner: 307@568
		owner: 	a MenuMorph(644087808)
		submorphs: 	#()
		fullBounds: 	110@550 corner: 307@568
		color: 	Color black
		extension: 	a MorphExtension (303824896)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(293601280)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
	Receiver's instance variables: 
		bounds: 	110@550 corner: 307@568
		owner: 	a MenuMorph(644087808)
		submorphs: 	#()
		fullBounds: 	110@550 corner: 307@568
		color: 	Color black
		extension: 	a MorphExtension (303824896)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MouseButtonEvent>>sentTo:
	Receiver: [159@558 mouseUp 444212654 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(293601280)'Inspect it'
	Receiver's instance variables: 
		timeStamp: 	444212654
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	159@558
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(293601280)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
	Receiver's instance variables: 
		bounds: 	110@550 corner: 307@568
		owner: 	a MenuMorph(644087808)
		submorphs: 	#()
		fullBounds: 	110@550 corner: 307@568
		color: 	Color black
		extension: 	a MorphExtension (303824896)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
		aMorph: 	a ToggleMenuItemMorph(293601280)'Inspect it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
		aMorph: 	a ToggleMenuItemMorph(293601280)'Inspect it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(293601280)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	110@550 corner: 307@568
		owner: 	a MenuMorph(644087808)
		submorphs: 	#()
		fullBounds: 	110@550 corner: 307@568
		color: 	Color black
		extension: 	a MorphExtension (303824896)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
		aMorph: 	a MenuMorph(644087808)
		localEvt: 	[159@558 mouseUp 444212654 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(293601280)'Inspect it'
		morphs: 	an Array(a ToggleMenuItemMorph(553385984)'Redo' a ToggleMenuItemMorph(6...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
		aMorph: 	a MenuMorph(644087808)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(644087808)
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	105@343 corner: 312@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(553385984)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	105@343 corner: 312@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (659030016) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(293601280)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(553385984)'Redo' a Toggle...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(644087808)
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
	Receiver's instance variables: 
		bounds: 	105@343 corner: 312@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(553385984)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	105@343 corner: 312@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (659030016) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(293601280)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(553385984)'Redo' a Toggle...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(644087808)
	Arguments and temporary variables: 
		evt: 	[159@558 mouseUp 444212654 nil]
	Receiver's instance variables: 
		bounds: 	105@343 corner: 312@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(553385984)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	105@343 corner: 312@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (659030016) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(293601280)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(553385984)'Redo' a Toggle...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
		focusHolder: 	a MenuMorph(644087808)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	159@557 corner: 175@573
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	159@557 corner: 175@573
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(296747008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[159@558 159@557 mouseMove 444212683 nil]
		targetOffset: 	49@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444212683 159 557 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1057488896) an O...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[159@558 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1057488896) an O...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
		focusHolder: 	a MenuMorph(644087808)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	159@557 corner: 175@573
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	159@557 corner: 175@573
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(296747008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[159@558 159@557 mouseMove 444212683 nil]
		targetOffset: 	49@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444212683 159 557 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
		focusHolder: 	a MenuMorph(644087808)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	159@557 corner: 175@573
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	159@557 corner: 175@573
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(296747008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[159@558 159@557 mouseMove 444212683 nil]
		targetOffset: 	49@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444212683 159 557 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
	Receiver's instance variables: 
		bounds: 	159@557 corner: 175@573
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	159@557 corner: 175@573
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(296747008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[159@558 159@557 mouseMove 444212683 nil]
		targetOffset: 	49@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444212683 159 557 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[159@558 mouseUp 444212654 nil]
		evt: 	[159@558 mouseUp 444212654 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	159@557 corner: 175@573
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	159@557 corner: 175@573
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(296747008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[159@558 159@557 mouseMove 444212683 nil]
		targetOffset: 	49@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444212683 159 557 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[159@558 mouseUp 444212654 nil]
		evtBuf: 	#(1 444212654 159 558 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	159@557 corner: 175@573
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	159@557 corner: 175@573
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(296747008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[159@558 159@557 mouseMove 444212683 nil]
		targetOffset: 	49@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444212683 159 557 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil



--- The full stack ---
WebHMIElement class(Object)>>doesNotUnderstand: #widget
WebHMIElement class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBTextMorph(TextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
OBTextMorphSelection>>inspectIt
OBInspectItTextCommand>>execute
OBInspectItTextCommand(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
OBTextMorph(TextMorphForEditView)>>mouseDown:
OBTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBGroupingMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: WebHMIElement class>>widget
21 April 2012 8:48:22 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

WebHMIElement class(Object)>>doesNotUnderstand: #widget
	Receiver: WebHMIElement
	Arguments and temporary variables: 
		aMessage: 	widget
		exception: 	MessageNotUnderstood: WebHMIElement class>>widget
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeParam:value:->(WebHMIElement>>#changePara...etc...
		format: 	138
		instanceVariables: 	#('state' 'elName' 'elType' 'widget')
		organization: 	('as yet unclassified' changeParam:value: elName elName: elType e...etc...
		subclasses: 	nil
		name: 	#WebHMIElement
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#WebHMI
		traitComposition: 	nil
		localSelectors: 	nil
		collection: 	an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElemen...etc...


WebHMIElement class>>DoIt
	Receiver: WebHMIElement
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeParam:value:->(WebHMIElement>>#changePara...etc...
		format: 	138
		instanceVariables: 	#('state' 'elName' 'elType' 'widget')
		organization: 	('as yet unclassified' changeParam:value: elName elName: elType e...etc...
		subclasses: 	nil
		name: 	#WebHMIElement
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#WebHMI
		traitComposition: 	nil
		localSelectors: 	nil
		collection: 	an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElemen...etc...


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'params
	^ self widget params'
		aContext: 	nil
		receiver: 	WebHMIElement
		aRequestor: 	an OBTextMorph(928251904)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ self widget params
		method: 	(WebHMIElement class>>#DoIt "a CompiledMethod(870580224)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'params
	^ self widget params'
		requestor: 	an OBTextMorph(928251904)
		class: 	WebHMIElement class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	WebHMIElement
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(928251904)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	WebHMIElement
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(928251904)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 28)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 28)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorph(TextMorph)>>handleEdit:
	Receiver: an OBTextMorph(928251904)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1335@98
		owner: 	a TransformMorph(1069547520)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1335@98
		color: 	Color black
		extension: 	a MorphExtension (1008467968) [other:  (blinkStart -> 444298292) (my...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'params
	^ self widget params
		do:
			[ :p | 
			''(HMIelemen...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	an OBPluggableTextMorph(1022623744)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 28)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(11 to: 28)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorphSelection>>inspectIt
	Receiver: an OBTextMorphSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		selection: 	(11 to: 28)
		text: 	a Text for 'params
	^ self widget params
		do:
			[ :p | 
			''(HMIelemen...etc...
		morph: 	an OBPluggableTextMorph(1022623744)


OBInspectItTextCommand>>execute
	Receiver: an OBInspectItTextCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


OBInspectItTextCommand(OBCommand)>>perform:orSendTo:
	Receiver: an OBInspectItTextCommand
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableTextMorph(1022623744)
	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(411566080)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[129@563 mouseUp 444300466 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	70@550 corner: 267@568
		owner: 	a MenuMorph(757858304)
		submorphs: 	#()
		fullBounds: 	70@550 corner: 267@568
		color: 	Color black
		extension: 	a MorphExtension (421789696)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(411566080)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[129@563 mouseUp 444300466 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	70@550 corner: 267@568
		owner: 	a MenuMorph(757858304)
		submorphs: 	#()
		fullBounds: 	70@550 corner: 267@568
		color: 	Color black
		extension: 	a MorphExtension (421789696)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(411566080)'Inspect it'
	Arguments and temporary variables: 
		evt: 	[129@563 mouseUp 444300466 nil]
	Receiver's instance variables: 
		bounds: 	70@550 corner: 267@568
		owner: 	a MenuMorph(757858304)
		submorphs: 	#()
		fullBounds: 	70@550 corner: 267@568
		color: 	Color black
		extension: 	a MorphExtension (421789696)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(411566080)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
	Receiver's instance variables: 
		bounds: 	70@550 corner: 267@568
		owner: 	a MenuMorph(757858304)
		submorphs: 	#()
		fullBounds: 	70@550 corner: 267@568
		color: 	Color black
		extension: 	a MorphExtension (421789696)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MouseButtonEvent>>sentTo:
	Receiver: [129@563 mouseUp 444300466 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(411566080)'Inspect it'
	Receiver's instance variables: 
		timeStamp: 	444300466
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	129@563
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(411566080)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
	Receiver's instance variables: 
		bounds: 	70@550 corner: 267@568
		owner: 	a MenuMorph(757858304)
		submorphs: 	#()
		fullBounds: 	70@550 corner: 267@568
		color: 	Color black
		extension: 	a MorphExtension (421789696)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
		aMorph: 	a ToggleMenuItemMorph(411566080)'Inspect it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
		aMorph: 	a ToggleMenuItemMorph(411566080)'Inspect it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(411566080)'Inspect it'
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	70@550 corner: 267@568
		owner: 	a MenuMorph(757858304)
		submorphs: 	#()
		fullBounds: 	70@550 corner: 267@568
		color: 	Color black
		extension: 	a MorphExtension (421789696)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBInspectItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+i'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
		aMorph: 	a MenuMorph(757858304)
		localEvt: 	[129@563 mouseUp 444300466 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(411566080)'Inspect it'
		morphs: 	an Array(a ToggleMenuItemMorph(667156480)'Redo' a ToggleMenuItemMorph(8...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
		aMorph: 	a MenuMorph(757858304)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(757858304)
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	65@343 corner: 272@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(667156480)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	65@343 corner: 272@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (772800512) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(411566080)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(667156480)'Redo' a Toggle...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(757858304)
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
	Receiver's instance variables: 
		bounds: 	65@343 corner: 272@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(667156480)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	65@343 corner: 272@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (772800512) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(411566080)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(667156480)'Redo' a Toggle...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(757858304)
	Arguments and temporary variables: 
		evt: 	[129@563 mouseUp 444300466 nil]
	Receiver's instance variables: 
		bounds: 	65@343 corner: 272@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(667156480)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	65@343 corner: 272@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (772800512) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(411566080)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(667156480)'Redo' a Toggle...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
		focusHolder: 	a MenuMorph(757858304)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	129@563 corner: 145@579
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(2359296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[129@563 mouseUp 444300466 nil]
		targetOffset: 	59@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444300466 129 563 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(708313088) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[129@563 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(708313088) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
		focusHolder: 	a MenuMorph(757858304)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	129@563 corner: 145@579
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(2359296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[129@563 mouseUp 444300466 nil]
		targetOffset: 	59@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444300466 129 563 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
		focusHolder: 	a MenuMorph(757858304)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	129@563 corner: 145@579
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(2359296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[129@563 mouseUp 444300466 nil]
		targetOffset: 	59@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444300466 129 563 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
	Receiver's instance variables: 
		bounds: 	129@563 corner: 145@579
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(2359296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[129@563 mouseUp 444300466 nil]
		targetOffset: 	59@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444300466 129 563 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[129@563 mouseUp 444300466 nil]
		evt: 	[129@563 mouseUp 444300466 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	129@563 corner: 145@579
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(2359296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[129@563 mouseUp 444300466 nil]
		targetOffset: 	59@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444300466 129 563 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[129@563 mouseUp 444300466 nil]
		evtBuf: 	#(1 444300466 129 563 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	129@563 corner: 145@579
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(2359296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[129@563 mouseUp 444300466 nil]
		targetOffset: 	59@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444300466 129 563 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil



--- The full stack ---
WebHMIElement class(Object)>>doesNotUnderstand: #widget
WebHMIElement class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBTextMorph(TextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>inspectIt
OBTextMorphSelection>>inspectIt
OBInspectItTextCommand>>execute
OBInspectItTextCommand(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
OBTextMorph(TextMorphForEditView)>>mouseDown:
OBTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBGroupingMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: WebHMIElement class>>widget
21 April 2012 8:52:16 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

WebHMIElement class(Object)>>doesNotUnderstand: #widget
	Receiver: WebHMIElement
	Arguments and temporary variables: 
		aMessage: 	widget
		exception: 	MessageNotUnderstood: WebHMIElement class>>widget
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeParam:value:->(WebHMIElement>>#changePara...etc...
		format: 	138
		instanceVariables: 	#('state' 'elName' 'elType' 'widget')
		organization: 	('as yet unclassified' changeParam:value: elName elName: elType e...etc...
		subclasses: 	nil
		name: 	#WebHMIElement
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#WebHMI
		traitComposition: 	nil
		localSelectors: 	nil
		collection: 	an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElemen...etc...


WebHMIElement class>>DoIt
	Receiver: WebHMIElement
	Arguments and temporary variables: 
		tmp: 	#('')
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeParam:value:->(WebHMIElement>>#changePara...etc...
		format: 	138
		instanceVariables: 	#('state' 'elName' 'elType' 'widget')
		organization: 	('as yet unclassified' changeParam:value: elName elName: elType e...etc...
		subclasses: 	nil
		name: 	#WebHMIElement
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#WebHMI
		traitComposition: 	nil
		localSelectors: 	nil
		collection: 	an OrderedCollection(a WebHMIElement a WebHMIElement a WebHMIElemen...etc...


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'params
	| tmp |
	tmp := ''''.
	self widget par...etc...
		aContext: 	nil
		receiver: 	WebHMIElement
		aRequestor: 	an OBTextMorph(928251904)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| tmp |
	<0-6> := a NewArrayNode.
	tmp := ''.
	self widget pa...etc...
		method: 	(WebHMIElement class>>#DoIt "a CompiledMethod(673710080)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'params
	| tmp |
	tmp := ''''.
	self widget par...etc...
		requestor: 	an OBTextMorph(928251904)
		class: 	WebHMIElement class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	WebHMIElement
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(928251904)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	WebHMIElement
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(928251904)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	an OBTextMorph(928251904)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in OBPluggableTextMorph(PluggableTextMorph)>>doIt
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(8 to: 333)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(8 to: 333)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorph(TextMorph)>>handleEdit:
	Receiver: an OBTextMorph(928251904)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1335@146
		owner: 	a TransformMorph(1069547520)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 1335@146
		color: 	Color black
		extension: 	a MorphExtension (1008467968) [other:  (blinkStart -> 444533238) (my...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'params
	| tmp |
	tmp := ''''.
	self widget params
		do: [ :p ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	an OBPluggableTextMorph(1022623744)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(8 to: 333)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>doIt
	Receiver: an OBPluggableTextMorph(1022623744)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	15@464 corner: 1356@678
		owner: 	an OBGroupingMorph(1034944512)
		submorphs: 	an Array(a TransformMorph(1069547520))
		fullBounds: 	15@464 corner: 1356@678
		color: 	Color white
		extension: 	a MorphExtension (907018240)
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(1050148864)
		scroller: 	a TransformMorph(1069547520)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1066139648)
		textMorph: 	an OBTextMorph(928251904)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(8 to: 333)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


OBTextMorphSelection>>doIt
	Receiver: an OBTextMorphSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		selection: 	(8 to: 333)
		text: 	a Text for 'params
	| tmp |
	tmp := ''''.
	self widget params
		do: [ :p ...etc...
		morph: 	an OBPluggableTextMorph(1022623744)


OBDoItTextCommand>>execute
	Receiver: an OBDoItTextCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


OBDoItTextCommand(OBCommand)>>perform:orSendTo:
	Receiver: an OBDoItTextCommand
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableTextMorph(1022623744)
	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(728498176)'Do it'
	Arguments and temporary variables: 
		evt: 	[147@518 mouseUp 444534337 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	78@512 corner: 275@530
		owner: 	a MenuMorph(750780416)
		submorphs: 	#()
		fullBounds: 	78@512 corner: 275@530
		color: 	Color black
		extension: 	a MorphExtension (738721792)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBDoItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+d'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(728498176)'Do it'
	Arguments and temporary variables: 
		evt: 	[147@518 mouseUp 444534337 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	78@512 corner: 275@530
		owner: 	a MenuMorph(750780416)
		submorphs: 	#()
		fullBounds: 	78@512 corner: 275@530
		color: 	Color black
		extension: 	a MorphExtension (738721792)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBDoItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+d'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(728498176)'Do it'
	Arguments and temporary variables: 
		evt: 	[147@518 mouseUp 444534337 nil]
	Receiver's instance variables: 
		bounds: 	78@512 corner: 275@530
		owner: 	a MenuMorph(750780416)
		submorphs: 	#()
		fullBounds: 	78@512 corner: 275@530
		color: 	Color black
		extension: 	a MorphExtension (738721792)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBDoItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+d'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(728498176)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
	Receiver's instance variables: 
		bounds: 	78@512 corner: 275@530
		owner: 	a MenuMorph(750780416)
		submorphs: 	#()
		fullBounds: 	78@512 corner: 275@530
		color: 	Color black
		extension: 	a MorphExtension (738721792)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBDoItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+d'


MouseButtonEvent>>sentTo:
	Receiver: [147@518 mouseUp 444534337 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(728498176)'Do it'
	Receiver's instance variables: 
		timeStamp: 	444534337
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	147@518
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(728498176)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
	Receiver's instance variables: 
		bounds: 	78@512 corner: 275@530
		owner: 	a MenuMorph(750780416)
		submorphs: 	#()
		fullBounds: 	78@512 corner: 275@530
		color: 	Color black
		extension: 	a MorphExtension (738721792)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBDoItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+d'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
		aMorph: 	a ToggleMenuItemMorph(728498176)'Do it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
		aMorph: 	a ToggleMenuItemMorph(728498176)'Do it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(728498176)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	78@512 corner: 275@530
		owner: 	a MenuMorph(750780416)
		submorphs: 	#()
		fullBounds: 	78@512 corner: 275@530
		color: 	Color black
		extension: 	a MorphExtension (738721792)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBDoItTextCommand
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableTextMorph(1022623744))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+d'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
		aMorph: 	a MenuMorph(750780416)
		localEvt: 	[147@518 mouseUp 444534337 nil]
		index: 	13
		child: 	a ToggleMenuItemMorph(728498176)'Do it'
		morphs: 	an Array(a ToggleMenuItemMorph(660078592)'Redo' a ToggleMenuItemMorph(8...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
		aMorph: 	a MenuMorph(750780416)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(750780416)
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	73@343 corner: 280@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(660078592)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	73@343 corner: 280@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (765722624) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(728498176)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(660078592)'Redo' a Toggle...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(750780416)
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
	Receiver's instance variables: 
		bounds: 	73@343 corner: 280@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(660078592)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	73@343 corner: 280@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (765722624) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(728498176)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(660078592)'Redo' a Toggle...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(750780416)
	Arguments and temporary variables: 
		evt: 	[147@518 mouseUp 444534337 nil]
	Receiver's instance variables: 
		bounds: 	73@343 corner: 280@726
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(660078592)'Redo' a ToggleMenuItemMorp...etc...
		fullBounds: 	73@343 corner: 280@726
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (765722624) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	an OBDefinitionPanel
		selectedItem: 	a ToggleMenuItemMorph(728498176)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(660078592)'Redo' a Toggle...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
		focusHolder: 	a MenuMorph(750780416)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	147@518 corner: 163@534
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	147@518 corner: 163@534
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(162004992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[147@518 mouseUp 444534337 nil]
		targetOffset: 	69@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444534337 147 518 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(923009024) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[147@518 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(923009024) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
		focusHolder: 	a MenuMorph(750780416)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	147@518 corner: 163@534
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	147@518 corner: 163@534
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(162004992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[147@518 mouseUp 444534337 nil]
		targetOffset: 	69@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444534337 147 518 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
		focusHolder: 	a MenuMorph(750780416)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	147@518 corner: 163@534
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	147@518 corner: 163@534
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(162004992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[147@518 mouseUp 444534337 nil]
		targetOffset: 	69@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444534337 147 518 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
	Receiver's instance variables: 
		bounds: 	147@518 corner: 163@534
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	147@518 corner: 163@534
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(162004992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[147@518 mouseUp 444534337 nil]
		targetOffset: 	69@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444534337 147 518 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[147@518 mouseUp 444534337 nil]
		evt: 	[147@518 mouseUp 444534337 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	147@518 corner: 163@534
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	147@518 corner: 163@534
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(162004992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[147@518 mouseUp 444534337 nil]
		targetOffset: 	69@6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444534337 147 518 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil



--- The full stack ---
WebHMIElement class(Object)>>doesNotUnderstand: #widget
WebHMIElement class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in OBPluggableTextMorph(PluggableTextMorph)>>doIt
[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBTextMorph(TextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>doIt
OBTextMorphSelection>>doIt
OBDoItTextCommand>>execute
OBDoItTextCommand(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
OBPluggableTextMorph(PluggableTextMorph)>>yellowButtonActivity:
OBTextMorph(TextMorphForEditView)>>mouseDown:
OBTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBGroupingMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Reading a number failed: a digit between 0 and 9 expected
21 April 2012 8:52:58 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

SqNumberParser(Object)>>error:
	Receiver: a SqNumberParser
	Arguments and temporary variables: 
		aString: 	'Reading a number failed: a digit between 0 and 9 expected'
	Receiver's instance variables: 
		sourceStream: 	a ReadStream ''
		base: 	10
		neg: 	false
		integerPart: 	nil
		fractionPart: 	0
		exponent: 	0
		scale: 	0
		nDigits: 	0
		lastNonZero: 	0
		requestor: 	nil
		failBlock: 	nil


SqNumberParser(NumberParser)>>expected:
	Receiver: a SqNumberParser
	Arguments and temporary variables: 
		aString: 	'a digit between 0 and 9'
		errorString: 	'a digit between 0 and 9 expected'
	Receiver's instance variables: 
		sourceStream: 	a ReadStream ''
		base: 	10
		neg: 	false
		integerPart: 	nil
		fractionPart: 	0
		exponent: 	0
		scale: 	0
		nDigits: 	0
		lastNonZero: 	0
		requestor: 	nil
		failBlock: 	nil


SqNumberParser>>readNamedFloatOrFail
	Receiver: a SqNumberParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sourceStream: 	a ReadStream ''
		base: 	10
		neg: 	false
		integerPart: 	nil
		fractionPart: 	0
		exponent: 	0
		scale: 	0
		nDigits: 	0
		lastNonZero: 	0
		requestor: 	nil
		failBlock: 	nil


SqNumberParser>>nextNumber
	Receiver: a SqNumberParser
	Arguments and temporary variables: 
		numberOfTrailingZeroInIntegerPart: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream ''
		base: 	10
		neg: 	false
		integerPart: 	nil
		fractionPart: 	0
		exponent: 	0
		scale: 	0
		nDigits: 	0
		lastNonZero: 	0
		requestor: 	nil
		failBlock: 	nil


Number class>>readFrom:
	Receiver: Number
	Arguments and temporary variables: 
		stringOrStream: 	a ReadStream ''
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(size 112)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Graphics-Primitives' @)
('*Tools-Inspector' defaultLabelForIns...etc...
		subclasses: 	{Fraction. Float. Integer}
		name: 	#Number
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Numbers'
		traitComposition: 	{}
		localSelectors: 	nil


Number class(Object)>>readFromString:
	Receiver: Number
	Arguments and temporary variables: 
		aString: 	''
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(size 112)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Graphics-Primitives' @)
('*Tools-Inspector' defaultLabelForIns...etc...
		subclasses: 	{Fraction. Float. Integer}
		name: 	#Number
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Numbers'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>asNumber
	Receiver: ''
	Arguments and temporary variables: 

	Receiver's instance variables: 
''

ByteString(String)>>adaptToString:andSend:
	Receiver: '(HMIelement getElement: '
	Arguments and temporary variables: 
		rcvr: 	''
		selector: 	#+
	Receiver's instance variables: 
'(HMIelement getElement: '

ByteString(String)>>+
	Receiver: ''
	Arguments and temporary variables: 
		arg: 	'(HMIelement getElement: '
	Receiver's instance variables: 
''

[:p | tmp := tmp + '(HMIelement getElement: ' , $' , self elName , $' , ') params add: ((HMIelementParam new) pName: ' , $' , p pName , $' , '; pValue: ' , $' , p pValue , $' , '). '] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		tmp: 	a WebHMIWidgetParam
		p: 	#('')
	Receiver's instance variables: 
nil

OrderedCollection>>do:
	Receiver: an OrderedCollection(a WebHMIWidgetParam)
	Arguments and temporary variables: 
		aBlock: 	[:p | tmp := tmp + '(HMIelement getElement: ' , $' , self elName , $' ,...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil a WebHMIWidgetParam nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		tmp: 	#('')
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '|tmp|
tmp := ''''. 
(WebHMIElement elements at...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(272367616)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| tmp |
	<0-6> := a NewArrayNode.
	tmp := ''.
	(WebHMIElement...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(726401024)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '|tmp|
tmp := ''''. 
(WebHMIElement elements at...etc...
		requestor: 	a TextMorphForEditView(272367616)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(665059328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	388@90 corner: 1208@417
		owner: 	a SystemWindow(404226048)
		submorphs: 	an Array(a TransformMorph(363855872))
		fullBounds: 	388@90 corner: 1208@417
		color: 	Color white
		extension: 	a MorphExtension (251133952) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(692584448)
		scroller: 	a TransformMorph(363855872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(360448000)
		textMorph: 	a TextMorphForEditView(272367616)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 348)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(665059328)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	388@90 corner: 1208@417
		owner: 	a SystemWindow(404226048)
		submorphs: 	an Array(a TransformMorph(363855872))
		fullBounds: 	388@90 corner: 1208@417
		color: 	Color white
		extension: 	a MorphExtension (251133952) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(692584448)
		scroller: 	a TransformMorph(363855872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(360448000)
		textMorph: 	a TextMorphForEditView(272367616)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 348)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@130
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@130
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 444575788) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget par...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(665059328)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	388@90 corner: 1208@417
		owner: 	a SystemWindow(404226048)
		submorphs: 	an Array(a TransformMorph(363855872))
		fullBounds: 	388@90 corner: 1208@417
		color: 	Color white
		extension: 	a MorphExtension (251133952) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(692584448)
		scroller: 	a TransformMorph(363855872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(360448000)
		textMorph: 	a TextMorphForEditView(272367616)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 348)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(665059328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	388@90 corner: 1208@417
		owner: 	a SystemWindow(404226048)
		submorphs: 	an Array(a TransformMorph(363855872))
		fullBounds: 	388@90 corner: 1208@417
		color: 	Color white
		extension: 	a MorphExtension (251133952) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(692584448)
		scroller: 	a TransformMorph(363855872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(360448000)
		textMorph: 	a TextMorphForEditView(272367616)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 348)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(665059328)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(404226048) a PluggableTextMorph(66...etc...
		contents: 	a Text for '2 to: 10000 do: [ :u |  u \\ 100 = 0 ifTrue: [ (WebHMIEle...etc...
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(798228480)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[454@117 mouseUp 444575988 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	436@109 corner: 573@127
		owner: 	a MenuMorph(791150592)
		submorphs: 	#()
		fullBounds: 	436@109 corner: 573@127
		color: 	Color black
		extension: 	a MorphExtension (808452096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(798228480)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[454@117 mouseUp 444575988 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	436@109 corner: 573@127
		owner: 	a MenuMorph(791150592)
		submorphs: 	#()
		fullBounds: 	436@109 corner: 573@127
		color: 	Color black
		extension: 	a MorphExtension (808452096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(798228480)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[454@117 mouseUp 444575988 nil]
	Receiver's instance variables: 
		bounds: 	436@109 corner: 573@127
		owner: 	a MenuMorph(791150592)
		submorphs: 	#()
		fullBounds: 	436@109 corner: 573@127
		color: 	Color black
		extension: 	a MorphExtension (808452096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(798228480)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[454@117 mouseUp 444575988 nil]
	Receiver's instance variables: 
		bounds: 	436@109 corner: 573@127
		owner: 	a MenuMorph(791150592)
		submorphs: 	#()
		fullBounds: 	436@109 corner: 573@127
		color: 	Color black
		extension: 	a MorphExtension (808452096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [454@117 mouseUp 444575988 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(798228480)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	444575988
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	454@117
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(798228480)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[454@117 mouseUp 444575988 nil]
	Receiver's instance variables: 
		bounds: 	436@109 corner: 573@127
		owner: 	a MenuMorph(791150592)
		submorphs: 	#()
		fullBounds: 	436@109 corner: 573@127
		color: 	Color black
		extension: 	a MorphExtension (808452096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[454@117 mouseUp 444575988 nil]
		aMorph: 	a ToggleMenuItemMorph(798228480)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[454@117 mouseUp 444575988 nil]
		aMorph: 	a ToggleMenuItemMorph(798228480)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(798228480)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[454@117 mouseUp 444575988 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	436@109 corner: 573@127
		owner: 	a MenuMorph(791150592)
		submorphs: 	#()
		fullBounds: 	436@109 corner: 573@127
		color: 	Color black
		extension: 	a MorphExtension (808452096)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[454@117 mouseUp 444575988 nil]
		aMorph: 	a MenuMorph(791150592)
		localEvt: 	[454@117 mouseUp 444575988 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(798228480)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(798228480)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[454@117 mouseUp 444575988 nil]
		aMorph: 	a MenuMorph(791150592)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(791150592)
	Arguments and temporary variables: 
		anEvent: 	[454@117 mouseUp 444575988 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	431@104 corner: 578@451
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(798228480)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	431@104 corner: 578@451
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (806092800) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(798228480)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(798228480)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(791150592)
	Arguments and temporary variables: 
		anEvent: 	[454@117 mouseUp 444575988 nil]
	Receiver's instance variables: 
		bounds: 	431@104 corner: 578@451
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(798228480)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	431@104 corner: 578@451
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (806092800) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(798228480)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(798228480)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(791150592)
	Arguments and temporary variables: 
		evt: 	[454@117 mouseUp 444575988 nil]
	Receiver's instance variables: 
		bounds: 	431@104 corner: 578@451
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(798228480)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	431@104 corner: 578@451
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (806092800) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(798228480)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(798228480)'Do it (d)' a T...etc...



--- The full stack ---
SqNumberParser(Object)>>error:
SqNumberParser(NumberParser)>>expected:
SqNumberParser>>readNamedFloatOrFail
SqNumberParser>>nextNumber
Number class>>readFrom:
Number class(Object)>>readFromString:
ByteString(String)>>asNumber
ByteString(String)>>adaptToString:andSend:
ByteString(String)>>+
[:p | tmp := tmp + '(HMIelement getElement: ' , $' , self elName , $' , ') params add: ((HMIelementParam new) pName: ' , $' , p pName , $' , '; pValue: ' , $' , p pValue , $' , '). '] in UndefinedObject>>DoIt
OrderedCollection>>do:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "elName" is nil
21 April 2012 8:53:50 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #elName
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	elName
		exception: 	MessageNotUnderstood: receiver of "elName" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[:p | tmp := tmp , ' (HMIelement getElement: ' , $' , self elName , $' , ') params add: ((HMIelementParam new) pName: ' , $' , p pName , $' , '; pValue: ' , $' , p pValue , $' , '). '] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		tmp: 	a WebHMIWidgetParam
		p: 	#('')
	Receiver's instance variables: 
nil

OrderedCollection>>do:
	Receiver: an OrderedCollection(a WebHMIWidgetParam)
	Arguments and temporary variables: 
		aBlock: 	[:p | tmp := tmp , ' (HMIelement getElement: ' , $' , self elName , $' ...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil a WebHMIWidgetParam nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		tmp: 	#('')
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '|tmp|
tmp := ''''. 
(WebHMIElement elements at...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(272367616)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| tmp |
	<0-6> := a NewArrayNode.
	tmp := ''.
	(WebHMIElement...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(114032640)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '|tmp|
tmp := ''''. 
(WebHMIElement elements at...etc...
		requestor: 	a TextMorphForEditView(272367616)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(665059328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	388@90 corner: 1208@417
		owner: 	a SystemWindow(404226048)
		submorphs: 	an Array(a TransformMorph(363855872))
		fullBounds: 	388@90 corner: 1208@417
		color: 	Color white
		extension: 	a MorphExtension (251133952) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(692584448)
		scroller: 	a TransformMorph(363855872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(360448000)
		textMorph: 	a TextMorphForEditView(272367616)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 350)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(665059328)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	388@90 corner: 1208@417
		owner: 	a SystemWindow(404226048)
		submorphs: 	an Array(a TransformMorph(363855872))
		fullBounds: 	388@90 corner: 1208@417
		color: 	Color white
		extension: 	a MorphExtension (251133952) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(692584448)
		scroller: 	a TransformMorph(363855872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(360448000)
		textMorph: 	a TextMorphForEditView(272367616)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 350)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@130
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@130
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 444628526) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget par...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(665059328)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	388@90 corner: 1208@417
		owner: 	a SystemWindow(404226048)
		submorphs: 	an Array(a TransformMorph(363855872))
		fullBounds: 	388@90 corner: 1208@417
		color: 	Color white
		extension: 	a MorphExtension (251133952) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(692584448)
		scroller: 	a TransformMorph(363855872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(360448000)
		textMorph: 	a TextMorphForEditView(272367616)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 350)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(665059328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	388@90 corner: 1208@417
		owner: 	a SystemWindow(404226048)
		submorphs: 	an Array(a TransformMorph(363855872))
		fullBounds: 	388@90 corner: 1208@417
		color: 	Color white
		extension: 	a MorphExtension (251133952) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(692584448)
		scroller: 	a TransformMorph(363855872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(360448000)
		textMorph: 	a TextMorphForEditView(272367616)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 350)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(665059328)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(404226048) a PluggableTextMorph(66...etc...
		contents: 	a Text for '2 to: 10000 do: [ :u |  u \\ 100 = 0 ifTrue: [ (WebHMIEle...etc...
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(645398528)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[437@111 mouseUp 444628819 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	418@107 corner: 555@125
		owner: 	a MenuMorph(638320640)
		submorphs: 	#()
		fullBounds: 	418@107 corner: 555@125
		color: 	Color black
		extension: 	a MorphExtension (655622144)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(645398528)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[437@111 mouseUp 444628819 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	418@107 corner: 555@125
		owner: 	a MenuMorph(638320640)
		submorphs: 	#()
		fullBounds: 	418@107 corner: 555@125
		color: 	Color black
		extension: 	a MorphExtension (655622144)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(645398528)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[437@111 mouseUp 444628819 nil]
	Receiver's instance variables: 
		bounds: 	418@107 corner: 555@125
		owner: 	a MenuMorph(638320640)
		submorphs: 	#()
		fullBounds: 	418@107 corner: 555@125
		color: 	Color black
		extension: 	a MorphExtension (655622144)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(645398528)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
	Receiver's instance variables: 
		bounds: 	418@107 corner: 555@125
		owner: 	a MenuMorph(638320640)
		submorphs: 	#()
		fullBounds: 	418@107 corner: 555@125
		color: 	Color black
		extension: 	a MorphExtension (655622144)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [437@111 mouseUp 444628819 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(645398528)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	444628819
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	437@111
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(645398528)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
	Receiver's instance variables: 
		bounds: 	418@107 corner: 555@125
		owner: 	a MenuMorph(638320640)
		submorphs: 	#()
		fullBounds: 	418@107 corner: 555@125
		color: 	Color black
		extension: 	a MorphExtension (655622144)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
		aMorph: 	a ToggleMenuItemMorph(645398528)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
		aMorph: 	a ToggleMenuItemMorph(645398528)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(645398528)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	418@107 corner: 555@125
		owner: 	a MenuMorph(638320640)
		submorphs: 	#()
		fullBounds: 	418@107 corner: 555@125
		color: 	Color black
		extension: 	a MorphExtension (655622144)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
		aMorph: 	a MenuMorph(638320640)
		localEvt: 	[437@111 mouseUp 444628819 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(645398528)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(645398528)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
		aMorph: 	a MenuMorph(638320640)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(638320640)
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	413@102 corner: 560@449
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(645398528)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	413@102 corner: 560@449
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (653262848) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(645398528)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(645398528)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(638320640)
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
	Receiver's instance variables: 
		bounds: 	413@102 corner: 560@449
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(645398528)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	413@102 corner: 560@449
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (653262848) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(645398528)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(645398528)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(638320640)
	Arguments and temporary variables: 
		evt: 	[437@111 mouseUp 444628819 nil]
	Receiver's instance variables: 
		bounds: 	413@102 corner: 560@449
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(645398528)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	413@102 corner: 560@449
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (653262848) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(645398528)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(645398528)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
		focusHolder: 	a MenuMorph(638320640)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	437@111 corner: 453@127
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	437@111 corner: 453@127
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(381419520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[437@111 mouseUp 444628819 nil]
		targetOffset: 	19@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444628819 437 111 0 0 0 1)
		lastKeyScanCode: 	32
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(13369344) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[437@111 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(13369344) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
		focusHolder: 	a MenuMorph(638320640)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	437@111 corner: 453@127
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	437@111 corner: 453@127
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(381419520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[437@111 mouseUp 444628819 nil]
		targetOffset: 	19@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444628819 437 111 0 0 0 1)
		lastKeyScanCode: 	32
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
		focusHolder: 	a MenuMorph(638320640)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	437@111 corner: 453@127
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	437@111 corner: 453@127
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(381419520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[437@111 mouseUp 444628819 nil]
		targetOffset: 	19@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444628819 437 111 0 0 0 1)
		lastKeyScanCode: 	32
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
	Receiver's instance variables: 
		bounds: 	437@111 corner: 453@127
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	437@111 corner: 453@127
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(381419520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[437@111 mouseUp 444628819 nil]
		targetOffset: 	19@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444628819 437 111 0 0 0 1)
		lastKeyScanCode: 	32
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[437@111 mouseUp 444628819 nil]
		evt: 	[437@111 mouseUp 444628819 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	437@111 corner: 453@127
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	437@111 corner: 453@127
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(381419520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[437@111 mouseUp 444628819 nil]
		targetOffset: 	19@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444628819 437 111 0 0 0 1)
		lastKeyScanCode: 	32
		combinedChar: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #elName
[:p | tmp := tmp , ' (HMIelement getElement: ' , $' , self elName , $' , ') params add: ((HMIelementParam new) pName: ' , $' , p pName , $' , '; pValue: ' , $' , p pValue , $' , '). '] in UndefinedObject>>DoIt
OrderedCollection>>do:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "elName" is nil
21 April 2012 8:54:22 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #elName
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	elName
		exception: 	MessageNotUnderstood: receiver of "elName" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		tmp: 	#(' (HMIelement getElement: ''adminWorkstation'') params add: ((HMIelement...etc...
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '|tmp|
tmp := ''''. 
(WebHMIElement elements at...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(272367616)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| tmp |
	<0-6> := a NewArrayNode.
	tmp := ''.
	(WebHMIElement...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(664797184)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '|tmp|
tmp := ''''. 
(WebHMIElement elements at...etc...
		requestor: 	a TextMorphForEditView(272367616)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@146
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@146
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 444660716) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget par...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget ...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@146
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@146
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 444660716) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget par...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@146
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@146
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 444660716) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget par...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@146
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@146
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 444660716) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget par...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(272367616)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@146
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@146
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 444660716) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget par...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(665059328)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@146
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@146
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 444660716) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget par...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@146
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@146
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 444660716) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget par...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(272367616)
	Receiver's instance variables: 
		timeStamp: 	444660122
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	235@174
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@146
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@146
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 444660716) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget par...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@146
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@146
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 444660716) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget par...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	627@265 corner: 643@281
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(936378368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[628@265 627@265 mouseMove 444658920 nil]
		targetOffset: 	252@144
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444658920 627 265 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(623902720) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(623902720) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	627@265 corner: 643@281
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(936378368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[628@265 627@265 mouseMove 444658920 nil]
		targetOffset: 	252@144
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444658920 627 265 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(272367616)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	627@265 corner: 643@281
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(936378368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[628@265 627@265 mouseMove 444658920 nil]
		targetOffset: 	252@144
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444658920 627 265 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	627@265 corner: 643@281
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(936378368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[628@265 627@265 mouseMove 444658920 nil]
		targetOffset: 	252@144
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444658920 627 265 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	627@265 corner: 643@281
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(936378368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[628@265 627@265 mouseMove 444658920 nil]
		targetOffset: 	252@144
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444658920 627 265 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 444660122 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	627@265 corner: 643@281
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(936378368)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[628@265 627@265 mouseMove 444658920 nil]
		targetOffset: 	252@144
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444658920 627 265 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(623902720))(a PreDebu...etc...
		lastStepTime: 	444660114
		lastStepMessage: 	nil
		lastCycleTime: 	444660156
		alarms: 	a Heap()
		lastAlarmTime: 	444660114
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #elName
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "elName" is nil
21 April 2012 8:54:42 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #elName
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	elName
		exception: 	MessageNotUnderstood: receiver of "elName" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		tmp: 	#(' (HMIelement getElement: ''adminWorkstation'') params add: ((HMIelement...etc...
	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '|tmp|
tmp := ''''. 
(WebHMIElement elements at...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(272367616)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	| tmp |
	<0-6> := a NewArrayNode.
	tmp := ''.
	(WebHMIElement...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(109838336)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '|tmp|
tmp := ''''. 
(WebHMIElement elements at...etc...
		requestor: 	a TextMorphForEditView(272367616)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | 
selectionInterval := oldEditor selectionInterval.
	textMorp...etc...
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(272367616)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: result printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(665059328)
	Arguments and temporary variables: 
		oldEditor: 	an Array(a SmalltalkEditor)
	Receiver's instance variables: 
		bounds: 	388@90 corner: 1208@417
		owner: 	a SystemWindow(404226048)
		submorphs: 	an Array(a TransformMorph(363855872))
		fullBounds: 	388@90 corner: 1208@417
		color: 	Color white
		extension: 	a MorphExtension (251133952) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(692584448)
		scroller: 	a TransformMorph(363855872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(360448000)
		textMorph: 	a TextMorphForEditView(272367616)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 376)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(272367616)
	Arguments and temporary variables: 
		editBlock: 	[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result ...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 812@146
		owner: 	a TransformMorph(363855872)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 812@146
		color: 	Color black
		extension: 	a MorphExtension (352583680) [other:  (blinkStart -> 444680024) (myD...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget par...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(665059328)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(665059328)
	Arguments and temporary variables: 
		oldEditor: 	an Array(a SmalltalkEditor)
	Receiver's instance variables: 
		bounds: 	388@90 corner: 1208@417
		owner: 	a SystemWindow(404226048)
		submorphs: 	an Array(a TransformMorph(363855872))
		fullBounds: 	388@90 corner: 1208@417
		color: 	Color white
		extension: 	a MorphExtension (251133952) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(692584448)
		scroller: 	a TransformMorph(363855872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(360448000)
		textMorph: 	a TextMorphForEditView(272367616)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 376)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#printIt
		otherTarget: 	a PluggableTextMorph(665059328)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(404226048) a PluggableTextMorph(66...etc...
		contents: 	a Text for '|tmp|
tmp := ''''. 
(WebHMIElement elements at: 3) widget...etc...
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(138936320)'Print it (p)'
	Arguments and temporary variables: 
		evt: 	[681@178 mouseUp 444680640 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	662@165 corner: 799@183
		owner: 	a MenuMorph(48496640)
		submorphs: 	#()
		fullBounds: 	662@165 corner: 799@183
		color: 	Color black
		extension: 	a MorphExtension (149159936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(138936320)'Print it (p)'
	Arguments and temporary variables: 
		evt: 	[681@178 mouseUp 444680640 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	662@165 corner: 799@183
		owner: 	a MenuMorph(48496640)
		submorphs: 	#()
		fullBounds: 	662@165 corner: 799@183
		color: 	Color black
		extension: 	a MorphExtension (149159936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(138936320)'Print it (p)'
	Arguments and temporary variables: 
		evt: 	[681@178 mouseUp 444680640 nil]
	Receiver's instance variables: 
		bounds: 	662@165 corner: 799@183
		owner: 	a MenuMorph(48496640)
		submorphs: 	#()
		fullBounds: 	662@165 corner: 799@183
		color: 	Color black
		extension: 	a MorphExtension (149159936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(138936320)'Print it (p)'
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
	Receiver's instance variables: 
		bounds: 	662@165 corner: 799@183
		owner: 	a MenuMorph(48496640)
		submorphs: 	#()
		fullBounds: 	662@165 corner: 799@183
		color: 	Color black
		extension: 	a MorphExtension (149159936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [681@178 mouseUp 444680640 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(138936320)'Print it (p)'
	Receiver's instance variables: 
		timeStamp: 	444680640
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	681@178
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(138936320)'Print it (p)'
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
	Receiver's instance variables: 
		bounds: 	662@165 corner: 799@183
		owner: 	a MenuMorph(48496640)
		submorphs: 	#()
		fullBounds: 	662@165 corner: 799@183
		color: 	Color black
		extension: 	a MorphExtension (149159936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
		aMorph: 	a ToggleMenuItemMorph(138936320)'Print it (p)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
		aMorph: 	a ToggleMenuItemMorph(138936320)'Print it (p)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(138936320)'Print it (p)'
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	662@165 corner: 799@183
		owner: 	a MenuMorph(48496640)
		submorphs: 	#()
		fullBounds: 	662@165 corner: 799@183
		color: 	Color black
		extension: 	a MorphExtension (149159936)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it (p)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(665059328))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
		aMorph: 	a MenuMorph(48496640)
		localEvt: 	[681@178 mouseUp 444680640 nil]
		index: 	2
		child: 	a ToggleMenuItemMorph(138936320)'Print it (p)'
		morphs: 	an Array(a ToggleMenuItemMorph(55574528)'Do it (d)' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
		aMorph: 	a MenuMorph(48496640)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(48496640)
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	657@141 corner: 804@488
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(55574528)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	657@141 corner: 804@488
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (63438848) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(138936320)'Print it (p)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(55574528)'Do it (d)' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(48496640)
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
	Receiver's instance variables: 
		bounds: 	657@141 corner: 804@488
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(55574528)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	657@141 corner: 804@488
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (63438848) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(138936320)'Print it (p)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(55574528)'Do it (d)' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(48496640)
	Arguments and temporary variables: 
		evt: 	[681@178 mouseUp 444680640 nil]
	Receiver's instance variables: 
		bounds: 	657@141 corner: 804@488
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(55574528)'Do it (d)' a ToggleMenuItem...etc...
		fullBounds: 	657@141 corner: 804@488
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (63438848) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(138936320)'Print it (p)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(55574528)'Do it (d)' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
		focusHolder: 	a MenuMorph(48496640)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	681@178 corner: 697@194
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	681@178 corner: 697@194
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(754974720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[681@178 mouseUp 444680640 nil]
		targetOffset: 	18@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444680640 681 178 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(386924544) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[681@178 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(386924544) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
		focusHolder: 	a MenuMorph(48496640)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	681@178 corner: 697@194
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	681@178 corner: 697@194
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(754974720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[681@178 mouseUp 444680640 nil]
		targetOffset: 	18@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444680640 681 178 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
		focusHolder: 	a MenuMorph(48496640)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	681@178 corner: 697@194
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	681@178 corner: 697@194
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(754974720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[681@178 mouseUp 444680640 nil]
		targetOffset: 	18@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444680640 681 178 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
	Receiver's instance variables: 
		bounds: 	681@178 corner: 697@194
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	681@178 corner: 697@194
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(754974720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[681@178 mouseUp 444680640 nil]
		targetOffset: 	18@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444680640 681 178 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[681@178 mouseUp 444680640 nil]
		evt: 	[681@178 mouseUp 444680640 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	681@178 corner: 697@194
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	681@178 corner: 697@194
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(754974720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[681@178 mouseUp 444680640 nil]
		targetOffset: 	18@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444680640 681 178 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[681@178 mouseUp 444680640 nil]
		evtBuf: 	#(1 444680640 681 178 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	681@178 corner: 697@194
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	681@178 corner: 697@194
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(754974720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[681@178 mouseUp 444680640 nil]
		targetOffset: 	18@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 444680640 681 178 0 0 0 1)
		lastKeyScanCode: 	97
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(386924544))(a PreDebu...etc...
		lastStepTime: 	444680622
		lastStepMessage: 	nil
		lastCycleTime: 	444680666
		alarms: 	a Heap()
		lastAlarmTime: 	444680622
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(386924544))(a PreDebu...etc...
		lastStepTime: 	444680622
		lastStepMessage: 	nil
		lastCycleTime: 	444680666
		alarms: 	a Heap()
		lastAlarmTime: 	444680622
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(386924544))(a PreDebu...etc...
		lastStepTime: 	444680622
		lastStepMessage: 	nil
		lastCycleTime: 	444680666
		alarms: 	a Heap()
		lastAlarmTime: 	444680622
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #elName
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: result printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 60
5 May 2012 7:01:18 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: '(WebHMIElement elementFromCollection:firtsWorkstationswitch'
	Arguments and temporary variables: 
		index: 	60
	Receiver's instance variables: 
'(WebHMIElement elementFromCollection:firtsWorkstationswitch'

ByteString(Object)>>at:
	Receiver: '(WebHMIElement elementFromCollection:firtsWorkstationswitch'
	Arguments and temporary variables: 
		index: 	60
	Receiver's instance variables: 
'(WebHMIElement elementFromCollection:firtsWorkstationswitch'

ByteString>>at:
	Receiver: '(WebHMIElement elementFromCollection:firtsWorkstationswitch'
	Arguments and temporary variables: 
		index: 	60
	Receiver's instance variables: 
'(WebHMIElement elementFromCollection:firtsWorkstationswitch'

ByteString(SequenceableCollection)>>replaceFrom:to:with:startingAt:
	Receiver: '(WebHMIElement elementFromCollection:firtsWorkstationswitch                             '...etc...
	Arguments and temporary variables: 
		start: 	1
		stop: 	60
		replacement: 	'(WebHMIElement elementFromCollection:firtsWorkstationswitch'
		repStart: 	1
		index: 	60
		repOff: 	0
	Receiver's instance variables: 
'(WebHMIElement elementFromCollection:firtsWorkstationswitch                             '...etc...

ByteString(String)>>replaceFrom:to:with:startingAt:
	Receiver: '(WebHMIElement elementFromCollection:firtsWorkstationswitch                             '...etc...
	Arguments and temporary variables: 
		start: 	1
		stop: 	60
		replacement: 	'(WebHMIElement elementFromCollection:firtsWorkstationswitch'
		repStart: 	1
	Receiver's instance variables: 
'(WebHMIElement elementFromCollection:firtsWorkstationswitch                             '...etc...

ByteString>>replaceFrom:to:with:startingAt:
	Receiver: '(WebHMIElement elementFromCollection:firtsWorkstationswitch                             '...etc...
	Arguments and temporary variables: 
		start: 	1
		stop: 	60
		replacement: 	'(WebHMIElement elementFromCollection:firtsWorkstationswitch'
		repStart: 	1
	Receiver's instance variables: 
'(WebHMIElement elementFromCollection:firtsWorkstationswitch                             '...etc...

ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
	Receiver: '(WebHMIElement elementFromCollection:firtsWorkstationswitch'
	Arguments and temporary variables: 
		start: 	61
		stop: 	60
		replacementCollection: 	'right parenthesis expected ->'
		newSequenceableCollection: 	'(WebHMIElement elementFromCollection:firtsWorkstati...etc...
		newSize: 	88
		endReplacement: 	89
	Receiver's instance variables: 
'(WebHMIElement elementFromCollection:firtsWorkstationswitch'

Parser>>notify:at:
	Receiver: a Parser
	Arguments and temporary variables: 
		string: 	'right parenthesis expected'
		location: 	61
	Receiver's instance variables: 
		source: 	a ReadStream '(WebHMIElement elementFromCollection:firtsWorkstationswit...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#''
		tokenType: 	#doIt
		currentComment: 	nil
		buffer: 	a WriteStream 'firtsWorkstationswitch'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#''
		hereType: 	#doIt
		hereMark: 	61
		hereEnd: 	59
		prevMark: 	38
		prevEnd: 	59
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	nil
		parseNode: 	{WebHMIElement elementFromCollection: firtsWorkstationswitch}
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	1
		doitFlag: 	true
		properties: 	an AdditionalMethodState
		category: 	nil


Parser>>expected:
	Receiver: a Parser
	Arguments and temporary variables: 
		aString: 	'right parenthesis'
	Receiver's instance variables: 
		source: 	a ReadStream '(WebHMIElement elementFromCollection:firtsWorkstationswit...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#''
		tokenType: 	#doIt
		currentComment: 	nil
		buffer: 	a WriteStream 'firtsWorkstationswitch'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#''
		hereType: 	#doIt
		hereMark: 	61
		hereEnd: 	59
		prevMark: 	38
		prevEnd: 	59
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	nil
		parseNode: 	{WebHMIElement elementFromCollection: firtsWorkstationswitch}
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	1
		doitFlag: 	true
		properties: 	an AdditionalMethodState
		category: 	nil


Parser>>primaryExpression
	Receiver: a Parser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		source: 	a ReadStream '(WebHMIElement elementFromCollection:firtsWorkstationswit...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#''
		tokenType: 	#doIt
		currentComment: 	nil
		buffer: 	a WriteStream 'firtsWorkstationswitch'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#''
		hereType: 	#doIt
		hereMark: 	61
		hereEnd: 	59
		prevMark: 	38
		prevEnd: 	59
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	nil
		parseNode: 	{WebHMIElement elementFromCollection: firtsWorkstationswitch}
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	1
		doitFlag: 	true
		properties: 	an AdditionalMethodState
		category: 	nil


Parser>>expression
	Receiver: a Parser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		source: 	a ReadStream '(WebHMIElement elementFromCollection:firtsWorkstationswit...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#''
		tokenType: 	#doIt
		currentComment: 	nil
		buffer: 	a WriteStream 'firtsWorkstationswitch'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#''
		hereType: 	#doIt
		hereMark: 	61
		hereEnd: 	59
		prevMark: 	38
		prevEnd: 	59
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	nil
		parseNode: 	{WebHMIElement elementFromCollection: firtsWorkstationswitch}
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	1
		doitFlag: 	true
		properties: 	an AdditionalMethodState
		category: 	nil


Parser>>statements:innerBlock:blockNode:
	Receiver: a Parser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		source: 	a ReadStream '(WebHMIElement elementFromCollection:firtsWorkstationswit...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#''
		tokenType: 	#doIt
		currentComment: 	nil
		buffer: 	a WriteStream 'firtsWorkstationswitch'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#''
		hereType: 	#doIt
		hereMark: 	61
		hereEnd: 	59
		prevMark: 	38
		prevEnd: 	59
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	nil
		parseNode: 	{WebHMIElement elementFromCollection: firtsWorkstationswitch}
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	1
		doitFlag: 	true
		properties: 	an AdditionalMethodState
		category: 	nil


Parser>>statements:innerBlock:
	Receiver: a Parser
	Arguments and temporary variables: 
		argNodes: 	#()
		inner: 	true
	Receiver's instance variables: 
		source: 	a ReadStream '(WebHMIElement elementFromCollection:firtsWorkstationswit...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#''
		tokenType: 	#doIt
		currentComment: 	nil
		buffer: 	a WriteStream 'firtsWorkstationswitch'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#''
		hereType: 	#doIt
		hereMark: 	61
		hereEnd: 	59
		prevMark: 	38
		prevEnd: 	59
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	nil
		parseNode: 	{WebHMIElement elementFromCollection: firtsWorkstationswitch}
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	1
		doitFlag: 	true
		properties: 	an AdditionalMethodState
		category: 	nil


Parser>>method:context:
	Receiver: a Parser
	Arguments and temporary variables: 
		doit: 	true
		ctxt: 	nil
		sap: 	#(#DoIt #() 1)
		blk: 	nil
		prim: 	0
		temps: 	#()
		messageComment: 	nil
		methodNode: 	nil
	Receiver's instance variables: 
		source: 	a ReadStream '(WebHMIElement elementFromCollection:firtsWorkstationswit...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#''
		tokenType: 	#doIt
		currentComment: 	nil
		buffer: 	a WriteStream 'firtsWorkstationswitch'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#''
		hereType: 	#doIt
		hereMark: 	61
		hereEnd: 	59
		prevMark: 	38
		prevEnd: 	59
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	nil
		parseNode: 	{WebHMIElement elementFromCollection: firtsWorkstationswitch}
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	1
		doitFlag: 	true
		properties: 	an AdditionalMethodState
		category: 	nil


[methNode := self method: noPattern context: ctxt] in Parser>>parse:class:category:noPattern:context:notifying:ifFail:
	Receiver: a Parser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		source: 	a ReadStream '(WebHMIElement elementFromCollection:firtsWorkstationswit...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#''
		tokenType: 	#doIt
		currentComment: 	nil
		buffer: 	a WriteStream 'firtsWorkstationswitch'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#''
		hereType: 	#doIt
		hereMark: 	61
		hereEnd: 	59
		prevMark: 	38
		prevEnd: 	59
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	nil
		parseNode: 	{WebHMIElement elementFromCollection: firtsWorkstationswitch}
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	1
		doitFlag: 	true
		properties: 	an AdditionalMethodState
		category: 	nil


BlockClosure>>on:do:
	Receiver: [methNode := self method: noPattern context: ctxt]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[:ex | 
repeatNeeded := true.
	myStream := requestor text string...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	Parser>>parse:class:category:noPattern:context:notifying:ifFail:
		startpc: 	138
		numArgs: 	0


Parser>>parse:class:category:noPattern:context:notifying:ifFail:
	Receiver: a Parser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		source: 	a ReadStream '(WebHMIElement elementFromCollection:firtsWorkstationswit...etc...
		mark: 	59
		hereChar: 	Character arrowUp
		aheadChar: 	Character arrowUp
		token: 	#''
		tokenType: 	#doIt
		currentComment: 	nil
		buffer: 	a WriteStream 'firtsWorkstationswitch'
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...
		here: 	#''
		hereType: 	#doIt
		hereMark: 	61
		hereEnd: 	59
		prevMark: 	38
		prevEnd: 	59
		encoder: 	{an EncoderForV3PlusClosures}
		requestor: 	nil
		parseNode: 	{WebHMIElement elementFromCollection: firtsWorkstationswitch}
		failBlock: 	[^ failBlock value]
		requestorOffset: 	0
		tempsMark: 	1
		doitFlag: 	true
		properties: 	an AdditionalMethodState
		category: 	nil


Compiler>>translate:noPattern:ifFail:
	Receiver: a Compiler
	Arguments and temporary variables: 
		aStream: 	a ReadStream '(WebHMIElement elementFromCollection:firtsWorkstationswi...etc...
		noPattern: 	true
		failBlock: 	[^ failBlock value]
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '(WebHMIElement elementFromCollection:firtsWorkstati...etc...
		requestor: 	nil
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'(WebHMIElement elementFromCollection:firtsWorkstationswitch'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	nil
		failBlock: 	[^ nil]
		logFlag: 	false
		methodNode: 	nil
		method: 	nil
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '(WebHMIElement elementFromCollection:firtsWorkstati...etc...
		requestor: 	nil
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'(WebHMIElement elementFromCollection:firtsWorkstationswitch'
		anObject: 	nil
		aController: 	nil
		logFlag: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:for:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'(WebHMIElement elementFromCollection:firtsWorkstationswitch'
		anObject: 	nil
		logFlag: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'(WebHMIElement elementFromCollection:firtsWorkstationswitch'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'Compiler evaluate: ''(WebHMIElement elementFro...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(104595456)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Compiler evaluate: '(WebHMIElement elementFromCollection:' ...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(783024128)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'Compiler evaluate: ''(WebHMIElement elementFro...etc...
		requestor: 	a TextMorphForEditView(104595456)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compiler evaluate: ''(WebHMIElement elementFromCollection:'' ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'Compiler evaluate: ''(WebHMIElement elementFromCollection:...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compiler evaluate: ''(WebHMIElement elementFromCollection:'' ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
ByteString(SequenceableCollection)>>replaceFrom:to:with:startingAt:
ByteString(String)>>replaceFrom:to:with:startingAt:
ByteString>>replaceFrom:to:with:startingAt:
ByteString(SequenceableCollection)>>copyReplaceFrom:to:with:
Parser>>notify:at:
Parser>>expected:
Parser>>primaryExpression
Parser>>expression
Parser>>statements:innerBlock:blockNode:
Parser>>statements:innerBlock:
Parser>>method:context:
[methNode := self method: noPattern context: ctxt] in Parser>>parse:class:category:noPattern:context:notifying:ifFail:
BlockClosure>>on:do:
Parser>>parse:class:category:noPattern:context:notifying:ifFail:
Compiler>>translate:noPattern:ifFail:
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:for:logged:
Compiler class>>evaluate:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: False>>switch
5 May 2012 7:01:35 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

False(Object)>>doesNotUnderstand: #switch
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	switch
		exception: 	MessageNotUnderstood: False>>switch
		resumeValue: 	nil
	Receiver's instance variables: 
false

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'(WebHMIElement elementFromCollection:firtsWorkstation) switch'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	nil
		failBlock: 	[^ nil]
		logFlag: 	false
		methodNode: 	DoIt
	^ (WebHMIElement elementFromCollection: firtsWorkstation) swi...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(940048384)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '(WebHMIElement elementFromCollection:firtsWorkstati...etc...
		requestor: 	nil
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'(WebHMIElement elementFromCollection:firtsWorkstation) switch'
		anObject: 	nil
		aController: 	nil
		logFlag: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:for:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'(WebHMIElement elementFromCollection:firtsWorkstation) switch'
		anObject: 	nil
		logFlag: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'(WebHMIElement elementFromCollection:firtsWorkstation) switch'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'Compiler evaluate: ''(WebHMIElement elementFro...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(104595456)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Compiler evaluate: '(WebHMIElement elementFromCollection:' ...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(312475648)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'Compiler evaluate: ''(WebHMIElement elementFro...etc...
		requestor: 	a TextMorphForEditView(104595456)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compiler evaluate: ''(WebHMIElement elementFromCollection:'' ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'Compiler evaluate: ''(WebHMIElement elementFromCollection:...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compiler evaluate: ''(WebHMIElement elementFromCollection:'' ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compiler evaluate: ''(WebHMIElement elementFromCollection:'' ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compiler evaluate: ''(WebHMIElement elementFromCollection:'' ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(104595456)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(104595456)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compiler evaluate: ''(WebHMIElement elementFromCollection:'' ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(94896128)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compiler evaluate: ''(WebHMIElement elementFromCollection:'' ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compiler evaluate: ''(WebHMIElement elementFromCollection:'' ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(104595456)
	Receiver's instance variables: 
		timeStamp: 	2783717
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	567@51
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compiler evaluate: ''(WebHMIElement elementFromCollection:'' ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Compiler evaluate: ''(WebHMIElement elementFromCollection:'' ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(104595456)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	972@531 corner: 988@547
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(220987392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[972@532 972@531 mouseMove 2783047 nil]
		targetOffset: 	505@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2783047 972 531 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(927203328) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(927203328) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(104595456)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	972@531 corner: 988@547
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(220987392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[972@532 972@531 mouseMove 2783047 nil]
		targetOffset: 	505@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2783047 972 531 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(104595456)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	972@531 corner: 988@547
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(220987392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[972@532 972@531 mouseMove 2783047 nil]
		targetOffset: 	505@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2783047 972 531 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil



--- The full stack ---
False(Object)>>doesNotUnderstand: #switch
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:for:logged:
Compiler class>>evaluate:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: False>>elName:
19 June 2012 12:21:22 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

False(Object)>>doesNotUnderstand: #elName:
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	elName: 'Mail Server2'
		exception: 	MessageNotUnderstood: False>>elName:
		resumeValue: 	nil
	Receiver's instance variables: 
false

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '(WebHMIElement elementFromCollection: ''Mail S...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(104595456)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ (WebHMIElement elementFromCollection: 'Mail Server2') elNam...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(882376704)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '(WebHMIElement elementFromCollection: ''Mail S...etc...
		requestor: 	a TextMorphForEditView(104595456)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 1836812) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''Mail Server2'') elNam...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '(WebHMIElement elementFromCollection: ''Mail Server2'') el...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 1836812) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''Mail Server2'') elNam...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 1836812) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''Mail Server2'') elNam...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 1836812) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''Mail Server2'') elNam...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(104595456)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(104595456)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 1836812) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''Mail Server2'') elNam...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(94896128)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 1836812) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''Mail Server2'') elNam...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 1836812) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''Mail Server2'') elNam...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(104595456)
	Receiver's instance variables: 
		timeStamp: 	1836162
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	429@55
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 1836812) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''Mail Server2'') elNam...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 722@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 722@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 1836812) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''Mail Server2'') elNam...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(104595456)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	951@118 corner: 967@134
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(776994816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[952@120 951@118 mouseMove 1835614 nil]
		targetOffset: 	459@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1835614 951 120 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(409468928) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(409468928) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(104595456)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	951@118 corner: 967@134
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(776994816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[952@120 951@118 mouseMove 1835614 nil]
		targetOffset: 	459@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1835614 951 120 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(104595456)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	951@118 corner: 967@134
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(776994816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[952@120 951@118 mouseMove 1835614 nil]
		targetOffset: 	459@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1835614 951 120 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	951@118 corner: 967@134
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(776994816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[952@120 951@118 mouseMove 1835614 nil]
		targetOffset: 	459@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1835614 951 120 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	951@118 corner: 967@134
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(776994816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[952@120 951@118 mouseMove 1835614 nil]
		targetOffset: 	459@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1835614 951 120 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 1836162 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	951@118 corner: 967@134
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(776994816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[952@120 951@118 mouseMove 1835614 nil]
		targetOffset: 	459@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1835614 951 120 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(409468928))(a PreDebu...etc...
		lastStepTime: 	1836156
		lastStepMessage: 	nil
		lastCycleTime: 	1836199
		alarms: 	a Heap()
		lastAlarmTime: 	1836156
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
False(Object)>>doesNotUnderstand: #elName:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: WebHMIElement>>xPos
19 June 2012 5:08:18 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

WebHMIElement(Object)>>doesNotUnderstand: #xPos
	Receiver: a WebHMIElement
	Arguments and temporary variables: 
		aMessage: 	xPos
		exception: 	MessageNotUnderstood: WebHMIElement>>xPos
		resumeValue: 	nil
	Receiver's instance variables: 
		state: 	true
		elName: 	'My Home Computer'
		elType: 	a WebHMIElementType
		widget: 	a WebHMIWidget


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '(WebHMIElement elementFromCollection: ''My Hom...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(104595456)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ (WebHMIElement elementFromCollection: 'My Home Computer') x...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(792461312)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '(WebHMIElement elementFromCollection: ''My Hom...etc...
		requestor: 	a TextMorphForEditView(104595456)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | self afterSelectionInsertAndSelect: result printString]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	113
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#printIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		return: 	[:val | ^ val]
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 19052602) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''My Home Computer'' ) ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '(WebHMIElement elementFromCollection: ''My Home Computer''...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 19052602) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''My Home Computer'' ) ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 19052602) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''My Home Computer'' ) ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 19052602) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''My Home Computer'' ) ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(104595456)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(104595456)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 19052602) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''My Home Computer'' ) ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(94896128)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 19052602) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''My Home Computer'' ) ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 19052602) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''My Home Computer'' ) ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(104595456)
	Receiver's instance variables: 
		timeStamp: 	19051966
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	417@40
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	112


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 19052602) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''My Home Computer'' ) ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 19052602) (myDe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement elementFromCollection: ''My Home Computer'' ) ...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(104595456)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1101@74 corner: 1117@90
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(423362560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1104@73 1101@74 mouseMove 19051304 nil]
		targetOffset: 	104@20
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 19051304 1103 73 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(110886912) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(110886912) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(104595456)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1101@74 corner: 1117@90
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(423362560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1104@73 1101@74 mouseMove 19051304 nil]
		targetOffset: 	104@20
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 19051304 1103 73 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(104595456)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1101@74 corner: 1117@90
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(423362560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1104@73 1101@74 mouseMove 19051304 nil]
		targetOffset: 	104@20
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 19051304 1103 73 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	1101@74 corner: 1117@90
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(423362560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1104@73 1101@74 mouseMove 19051304 nil]
		targetOffset: 	104@20
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 19051304 1103 73 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1101@74 corner: 1117@90
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(423362560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1104@73 1101@74 mouseMove 19051304 nil]
		targetOffset: 	104@20
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 19051304 1103 73 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 19051966 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1101@74 corner: 1117@90
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(423362560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1104@73 1101@74 mouseMove 19051304 nil]
		targetOffset: 	104@20
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 19051304 1103 73 0 0 0 1)
		lastKeyScanCode: 	112
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(822607872))(an OBSys...etc...
		lastStepTime: 	19051956
		lastStepMessage: 	nil
		lastCycleTime: 	19052024
		alarms: 	a Heap()
		lastAlarmTime: 	19051956
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(822607872))(an OBSys...etc...
		lastStepTime: 	19051956
		lastStepMessage: 	nil
		lastCycleTime: 	19052024
		alarms: 	a Heap()
		lastAlarmTime: 	19051956
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
WebHMIElement(Object)>>doesNotUnderstand: #xPos
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 June 2012 6:57:38 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(772276224)
	Arguments and temporary variables: 
		anEvent: 	[66@413 87@412 mouseEnter 1072753 nil]
	Receiver's instance variables: 
		bounds: 	44@397 corner: 244@413
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	44@397 corner: 244@413
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (788267008) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	nil
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	nil
		lastActivity: 	1069282


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [66@413 87@412 mouseEnter 1072753 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(772276224)
	Receiver's instance variables: 
		timeStamp: 	1072753
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	87@412
		handler: 	nil
		wasHandled: 	false
		startPoint: 	66@413
		trail: 	{(72@412). (87@412)}


MouseMoveEvent>>sentTo:
	Receiver: [66@413 87@412 mouseEnter 1072753 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(772276224)
	Receiver's instance variables: 
		timeStamp: 	1072753
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	87@412
		handler: 	nil
		wasHandled: 	false
		startPoint: 	66@413
		trail: 	{(72@412). (87@412)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(772276224)
	Arguments and temporary variables: 
		anEvent: 	[66@413 87@412 mouseEnter 1072753 nil]
	Receiver's instance variables: 
		bounds: 	44@397 corner: 244@413
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	44@397 corner: 244@413
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (788267008) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	nil
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	nil
		lastActivity: 	1069282


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[66@413 87@412 mouseEnter 1072753 nil]
		originalEvent: 	[66@413 87@412 mouseMove 1072753 nil]
		aMorph: 	an OMenuMorph(772276224)
		transformedEvent: 	[66@413 87@412 mouseEnter 1072753 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[66@413 87@412 mouseEnter 1072753 nil]
		aLeftMorph: 	an OMenuMorph(772276224)
		anEvent: 	[66@413 87@412 mouseMove 1072753 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[66@413 87@412 mouseEnter 1072753 nil]
		aLeftMorph: 	an OMenuMorph(772276224)
		anEvent: 	[66@413 87@412 mouseMove 1072753 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(772276224)
		asMouseEnterEvent: 	[66@413 87@412 mouseMove 1072753 nil]
		anEnteredMorph: 	[66@413 87@412 mouseEnter 1072753 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(772276224))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(772276224))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[66@413 87@412 mouseMove 1072753 nil]
		asMouseEnterEvent: 	[66@413 87@412 mouseEnter 1072753 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[66@413 87@412 mouseMove 1072753 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[66@413 87@412 mouseMove 1072753 nil]
		evt: 	[66@413 87@412 mouseMove 1072753 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	132@413 corner: 148@429
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(872939520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[123@412 132@413 mouseMove 1072817 nil]
		targetOffset: 	52@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1072817 127 413 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[66@413 87@412 mouseMove 1072753 nil]
		evtBuf: 	#(1 1072753 72 412 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	132@413 corner: 148@429
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(872939520)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[123@412 132@413 mouseMove 1072817 nil]
		targetOffset: 	52@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1072817 127 413 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(772276224))(an OMenuMorp...etc...
		lastStepTime: 	1072751
		lastStepMessage: 	nil
		lastCycleTime: 	1072839
		alarms: 	a Heap()
		lastAlarmTime: 	1072751
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(772276224))(an OMenuMorp...etc...
		lastStepTime: 	1072751
		lastStepMessage: 	nil
		lastCycleTime: 	1072839
		alarms: 	a Heap()
		lastAlarmTime: 	1072751
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(772276224))(an OMenuMorp...etc...
		lastStepTime: 	1072751
		lastStepMessage: 	nil
		lastCycleTime: 	1072839
		alarms: 	a Heap()
		lastAlarmTime: 	1072751
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(772276224))(an OMenuMorp...etc...
		lastStepTime: 	1072751
		lastStepMessage: 	nil
		lastCycleTime: 	1072839
		alarms: 	a Heap()
		lastAlarmTime: 	1072751
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1362@566
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(182190080) an OM...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 June 2012 6:57:38 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(772276224)
	Arguments and temporary variables: 
		anEvent: 	[87@412 104@412 mouseEnter 1072777 nil]
	Receiver's instance variables: 
		bounds: 	44@397 corner: 244@413
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	44@397 corner: 244@413
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (788267008) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	nil
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	nil
		lastActivity: 	1069282


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [87@412 104@412 mouseEnter 1072777 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(772276224)
	Receiver's instance variables: 
		timeStamp: 	1072777
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	104@412
		handler: 	nil
		wasHandled: 	false
		startPoint: 	87@412
		trail: 	{(95@412). (104@412)}


MouseMoveEvent>>sentTo:
	Receiver: [87@412 104@412 mouseEnter 1072777 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(772276224)
	Receiver's instance variables: 
		timeStamp: 	1072777
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	104@412
		handler: 	nil
		wasHandled: 	false
		startPoint: 	87@412
		trail: 	{(95@412). (104@412)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(772276224)
	Arguments and temporary variables: 
		anEvent: 	[87@412 104@412 mouseEnter 1072777 nil]
	Receiver's instance variables: 
		bounds: 	44@397 corner: 244@413
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	44@397 corner: 244@413
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (788267008) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	nil
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	nil
		lastActivity: 	1069282


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[87@412 104@412 mouseEnter 1072777 nil]
		originalEvent: 	[87@412 104@412 mouseMove 1072777 nil]
		aMorph: 	an OMenuMorph(772276224)
		transformedEvent: 	[87@412 104@412 mouseEnter 1072777 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[87@412 104@412 mouseEnter 1072777 nil]
		aLeftMorph: 	an OMenuMorph(772276224)
		anEvent: 	[87@412 104@412 mouseMove 1072777 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[87@412 104@412 mouseEnter 1072777 nil]
		aLeftMorph: 	an OMenuMorph(772276224)
		anEvent: 	[87@412 104@412 mouseMove 1072777 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(772276224)
		asMouseEnterEvent: 	[87@412 104@412 mouseMove 1072777 nil]
		anEnteredMorph: 	[87@412 104@412 mouseEnter 1072777 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(772276224))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(772276224))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[87@412 104@412 mouseMove 1072777 nil]
		asMouseEnterEvent: 	[87@412 104@412 mouseEnter 1072777 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[87@412 104@412 mouseMove 1072777 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[87@412 104@412 mouseMove 1072777 nil]
		evt: 	[87@412 104@412 mouseMove 1072777 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	132@413 corner: 148@429
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(78905344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[123@412 132@413 mouseMove 1072817 nil]
		targetOffset: 	52@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1072817 127 413 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[87@412 104@412 mouseMove 1072777 nil]
		evtBuf: 	#(1 1072777 95 412 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	132@413 corner: 148@429
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(78905344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[123@412 132@413 mouseMove 1072817 nil]
		targetOffset: 	52@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1072817 127 413 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(772276224))(an OMenuMorp...etc...
		lastStepTime: 	1072751
		lastStepMessage: 	nil
		lastCycleTime: 	1072839
		alarms: 	a Heap()
		lastAlarmTime: 	1072751
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(772276224))(an OMenuMorp...etc...
		lastStepTime: 	1072751
		lastStepMessage: 	nil
		lastCycleTime: 	1072839
		alarms: 	a Heap()
		lastAlarmTime: 	1072751
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(772276224))(an OMenuMorp...etc...
		lastStepTime: 	1072751
		lastStepMessage: 	nil
		lastCycleTime: 	1072839
		alarms: 	a Heap()
		lastAlarmTime: 	1072751
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(772276224))(an OMenuMorp...etc...
		lastStepTime: 	1072751
		lastStepMessage: 	nil
		lastCycleTime: 	1072839
		alarms: 	a Heap()
		lastAlarmTime: 	1072751
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1362@566
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(840433664) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 June 2012 6:57:38 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(772276224)
	Arguments and temporary variables: 
		anEvent: 	[104@412 123@412 mouseEnter 1072801 nil]
	Receiver's instance variables: 
		bounds: 	44@397 corner: 244@413
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	44@397 corner: 244@413
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (788267008) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	nil
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	nil
		lastActivity: 	1069282


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [104@412 123@412 mouseEnter 1072801 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(772276224)
	Receiver's instance variables: 
		timeStamp: 	1072801
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	123@412
		handler: 	nil
		wasHandled: 	false
		startPoint: 	104@412
		trail: 	{(117@412). (123@412)}


MouseMoveEvent>>sentTo:
	Receiver: [104@412 123@412 mouseEnter 1072801 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(772276224)
	Receiver's instance variables: 
		timeStamp: 	1072801
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	123@412
		handler: 	nil
		wasHandled: 	false
		startPoint: 	104@412
		trail: 	{(117@412). (123@412)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(772276224)
	Arguments and temporary variables: 
		anEvent: 	[104@412 123@412 mouseEnter 1072801 nil]
	Receiver's instance variables: 
		bounds: 	44@397 corner: 244@413
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	44@397 corner: 244@413
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (788267008) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	nil
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	nil
		lastActivity: 	1069282


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[104@412 123@412 mouseEnter 1072801 nil]
		originalEvent: 	[104@412 123@412 mouseMove 1072801 nil]
		aMorph: 	an OMenuMorph(772276224)
		transformedEvent: 	[104@412 123@412 mouseEnter 1072801 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[104@412 123@412 mouseEnter 1072801 nil]
		aLeftMorph: 	an OMenuMorph(772276224)
		anEvent: 	[104@412 123@412 mouseMove 1072801 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[104@412 123@412 mouseEnter 1072801 nil]
		aLeftMorph: 	an OMenuMorph(772276224)
		anEvent: 	[104@412 123@412 mouseMove 1072801 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(772276224)
		asMouseEnterEvent: 	[104@412 123@412 mouseMove 1072801 nil]
		anEnteredMorph: 	[104@412 123@412 mouseEnter 1072801 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(772276224))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(772276224))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[104@412 123@412 mouseMove 1072801 nil]
		asMouseEnterEvent: 	[104@412 123@412 mouseEnter 1072801 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[104@412 123@412 mouseMove 1072801 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[104@412 123@412 mouseMove 1072801 nil]
		evt: 	[104@412 123@412 mouseMove 1072801 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	132@413 corner: 148@429
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(705429504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[123@412 132@413 mouseMove 1072817 nil]
		targetOffset: 	52@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1072817 127 413 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[104@412 123@412 mouseMove 1072801 nil]
		evtBuf: 	#(1 1072801 117 412 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	132@413 corner: 148@429
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(705429504)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[123@412 132@413 mouseMove 1072817 nil]
		targetOffset: 	52@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1072817 127 413 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(772276224))(an OMenuMorp...etc...
		lastStepTime: 	1072751
		lastStepMessage: 	nil
		lastCycleTime: 	1072839
		alarms: 	a Heap()
		lastAlarmTime: 	1072751
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(772276224))(an OMenuMorp...etc...
		lastStepTime: 	1072751
		lastStepMessage: 	nil
		lastCycleTime: 	1072839
		alarms: 	a Heap()
		lastAlarmTime: 	1072751
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(772276224))(an OMenuMorp...etc...
		lastStepTime: 	1072751
		lastStepMessage: 	nil
		lastCycleTime: 	1072839
		alarms: 	a Heap()
		lastAlarmTime: 	1072751
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(772276224))(an OMenuMorp...etc...
		lastStepTime: 	1072751
		lastStepMessage: 	nil
		lastCycleTime: 	1072839
		alarms: 	a Heap()
		lastAlarmTime: 	1072751
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1362@566
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(393216000) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 June 2012 7:24:50 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[445@423 440@439 mouseEnter 2704536 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [445@423 440@439 mouseEnter 2704536 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704536
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	440@439
		handler: 	nil
		wasHandled: 	false
		startPoint: 	445@423
		trail: 	{(441@433). (440@439)}


MouseMoveEvent>>sentTo:
	Receiver: [445@423 440@439 mouseEnter 2704536 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704536
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	440@439
		handler: 	nil
		wasHandled: 	false
		startPoint: 	445@423
		trail: 	{(441@433). (440@439)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[445@423 440@439 mouseEnter 2704536 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[445@423 440@439 mouseEnter 2704536 nil]
		originalEvent: 	[445@423 440@439 mouseMove 2704536 nil]
		aMorph: 	an OMenuMorph(243793920)
		transformedEvent: 	[445@423 440@439 mouseEnter 2704536 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[445@423 440@439 mouseEnter 2704536 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[445@423 440@439 mouseMove 2704536 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[445@423 440@439 mouseEnter 2704536 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[445@423 440@439 mouseMove 2704536 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(243793920)
		asMouseEnterEvent: 	[445@423 440@439 mouseMove 2704536 nil]
		anEnteredMorph: 	[445@423 440@439 mouseEnter 2704536 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(243793920))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(243793920))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[445@423 440@439 mouseMove 2704536 nil]
		asMouseEnterEvent: 	[445@423 440@439 mouseEnter 2704536 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[445@423 440@439 mouseMove 2704536 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[445@423 440@439 mouseMove 2704536 nil]
		evt: 	[445@423 440@439 mouseMove 2704536 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(68943872)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[445@423 440@439 mouseMove 2704536 nil]
		evtBuf: 	#(1 2704536 441 433 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(68943872)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1362@566
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(764411904) an OM...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 June 2012 7:24:50 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[440@439 439@445 mouseEnter 2704553 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [440@439 439@445 mouseEnter 2704553 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704553
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	439@445
		handler: 	nil
		wasHandled: 	false
		startPoint: 	440@439
		trail: 	{(439@445)}


MouseMoveEvent>>sentTo:
	Receiver: [440@439 439@445 mouseEnter 2704553 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704553
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	439@445
		handler: 	nil
		wasHandled: 	false
		startPoint: 	440@439
		trail: 	{(439@445)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[440@439 439@445 mouseEnter 2704553 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[440@439 439@445 mouseEnter 2704553 nil]
		originalEvent: 	[440@439 439@445 mouseMove 2704553 nil]
		aMorph: 	an OMenuMorph(243793920)
		transformedEvent: 	[440@439 439@445 mouseEnter 2704553 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[440@439 439@445 mouseEnter 2704553 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[440@439 439@445 mouseMove 2704553 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[440@439 439@445 mouseEnter 2704553 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[440@439 439@445 mouseMove 2704553 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(243793920)
		asMouseEnterEvent: 	[440@439 439@445 mouseMove 2704553 nil]
		anEnteredMorph: 	[440@439 439@445 mouseEnter 2704553 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(243793920))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(243793920))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[440@439 439@445 mouseMove 2704553 nil]
		asMouseEnterEvent: 	[440@439 439@445 mouseEnter 2704553 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[440@439 439@445 mouseMove 2704553 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[440@439 439@445 mouseMove 2704553 nil]
		evt: 	[440@439 439@445 mouseMove 2704553 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(471072768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[440@439 439@445 mouseMove 2704553 nil]
		evtBuf: 	#(1 2704553 439 445 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(471072768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1362@566
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(93061120) a PreD...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 June 2012 7:24:50 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[439@445 434@460 mouseEnter 2704560 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [439@445 434@460 mouseEnter 2704560 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704560
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	434@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	439@445
		trail: 	{(438@450). (436@455). (434@460)}


MouseMoveEvent>>sentTo:
	Receiver: [439@445 434@460 mouseEnter 2704560 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704560
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	434@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	439@445
		trail: 	{(438@450). (436@455). (434@460)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[439@445 434@460 mouseEnter 2704560 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[439@445 434@460 mouseEnter 2704560 nil]
		originalEvent: 	[439@445 434@460 mouseMove 2704560 nil]
		aMorph: 	an OMenuMorph(243793920)
		transformedEvent: 	[439@445 434@460 mouseEnter 2704560 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[439@445 434@460 mouseEnter 2704560 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[439@445 434@460 mouseMove 2704560 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[439@445 434@460 mouseEnter 2704560 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[439@445 434@460 mouseMove 2704560 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(243793920)
		asMouseEnterEvent: 	[439@445 434@460 mouseMove 2704560 nil]
		anEnteredMorph: 	[439@445 434@460 mouseEnter 2704560 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(243793920))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(243793920))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[439@445 434@460 mouseMove 2704560 nil]
		asMouseEnterEvent: 	[439@445 434@460 mouseEnter 2704560 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[439@445 434@460 mouseMove 2704560 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[439@445 434@460 mouseMove 2704560 nil]
		evt: 	[439@445 434@460 mouseMove 2704560 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(78905344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[439@445 434@460 mouseMove 2704560 nil]
		evtBuf: 	#(1 2704560 438 450 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(78905344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1362@566
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(840433664) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 June 2012 7:24:50 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[434@460 432@465 mouseEnter 2704590 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [434@460 432@465 mouseEnter 2704590 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704590
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	432@465
		handler: 	nil
		wasHandled: 	false
		startPoint: 	434@460
		trail: 	{(432@463). (432@465)}


MouseMoveEvent>>sentTo:
	Receiver: [434@460 432@465 mouseEnter 2704590 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704590
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	432@465
		handler: 	nil
		wasHandled: 	false
		startPoint: 	434@460
		trail: 	{(432@463). (432@465)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[434@460 432@465 mouseEnter 2704590 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[434@460 432@465 mouseEnter 2704590 nil]
		originalEvent: 	[434@460 432@465 mouseMove 2704590 nil]
		aMorph: 	an OMenuMorph(243793920)
		transformedEvent: 	[434@460 432@465 mouseEnter 2704590 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[434@460 432@465 mouseEnter 2704590 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[434@460 432@465 mouseMove 2704590 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[434@460 432@465 mouseEnter 2704590 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[434@460 432@465 mouseMove 2704590 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(243793920)
		asMouseEnterEvent: 	[434@460 432@465 mouseMove 2704590 nil]
		anEnteredMorph: 	[434@460 432@465 mouseEnter 2704590 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(243793920))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(243793920))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[434@460 432@465 mouseMove 2704590 nil]
		asMouseEnterEvent: 	[434@460 432@465 mouseEnter 2704590 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[434@460 432@465 mouseMove 2704590 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[434@460 432@465 mouseMove 2704590 nil]
		evt: 	[434@460 432@465 mouseMove 2704590 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(990380032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[434@460 432@465 mouseMove 2704590 nil]
		evtBuf: 	#(1 2704590 432 463 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(990380032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1362@566
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(678166528) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 June 2012 7:24:50 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[432@465 430@467 mouseEnter 2704609 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [432@465 430@467 mouseEnter 2704609 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704609
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	430@467
		handler: 	nil
		wasHandled: 	false
		startPoint: 	432@465
		trail: 	{(430@467)}


MouseMoveEvent>>sentTo:
	Receiver: [432@465 430@467 mouseEnter 2704609 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704609
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	430@467
		handler: 	nil
		wasHandled: 	false
		startPoint: 	432@465
		trail: 	{(430@467)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[432@465 430@467 mouseEnter 2704609 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[432@465 430@467 mouseEnter 2704609 nil]
		originalEvent: 	[432@465 430@467 mouseMove 2704609 nil]
		aMorph: 	an OMenuMorph(243793920)
		transformedEvent: 	[432@465 430@467 mouseEnter 2704609 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[432@465 430@467 mouseEnter 2704609 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[432@465 430@467 mouseMove 2704609 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[432@465 430@467 mouseEnter 2704609 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[432@465 430@467 mouseMove 2704609 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(243793920)
		asMouseEnterEvent: 	[432@465 430@467 mouseMove 2704609 nil]
		anEnteredMorph: 	[432@465 430@467 mouseEnter 2704609 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(243793920))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(243793920))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[432@465 430@467 mouseMove 2704609 nil]
		asMouseEnterEvent: 	[432@465 430@467 mouseEnter 2704609 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[432@465 430@467 mouseMove 2704609 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[432@465 430@467 mouseMove 2704609 nil]
		evt: 	[432@465 430@467 mouseMove 2704609 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(621805568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[432@465 430@467 mouseMove 2704609 nil]
		evtBuf: 	#(1 2704609 430 467 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(621805568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1362@566
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(309592064) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 June 2012 7:24:51 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[430@467 433@471 mouseEnter 2704633 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [430@467 433@471 mouseEnter 2704633 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704633
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	433@471
		handler: 	nil
		wasHandled: 	false
		startPoint: 	430@467
		trail: 	{(430@468). (430@469). (433@471)}


MouseMoveEvent>>sentTo:
	Receiver: [430@467 433@471 mouseEnter 2704633 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704633
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	433@471
		handler: 	nil
		wasHandled: 	false
		startPoint: 	430@467
		trail: 	{(430@468). (430@469). (433@471)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[430@467 433@471 mouseEnter 2704633 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[430@467 433@471 mouseEnter 2704633 nil]
		originalEvent: 	[430@467 433@471 mouseMove 2704633 nil]
		aMorph: 	an OMenuMorph(243793920)
		transformedEvent: 	[430@467 433@471 mouseEnter 2704633 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[430@467 433@471 mouseEnter 2704633 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[430@467 433@471 mouseMove 2704633 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[430@467 433@471 mouseEnter 2704633 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[430@467 433@471 mouseMove 2704633 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(243793920)
		asMouseEnterEvent: 	[430@467 433@471 mouseMove 2704633 nil]
		anEnteredMorph: 	[430@467 433@471 mouseEnter 2704633 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(243793920))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(243793920))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[430@467 433@471 mouseMove 2704633 nil]
		asMouseEnterEvent: 	[430@467 433@471 mouseEnter 2704633 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[430@467 433@471 mouseMove 2704633 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[430@467 433@471 mouseMove 2704633 nil]
		evt: 	[430@467 433@471 mouseMove 2704633 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(389283840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[430@467 433@471 mouseMove 2704633 nil]
		evtBuf: 	#(1 2704633 430 468 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(389283840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1362@566
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(77070336) a PreD...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
21 June 2012 7:24:51 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[433@471 439@475 mouseEnter 2704657 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [433@471 439@475 mouseEnter 2704657 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704657
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	439@475
		handler: 	nil
		wasHandled: 	false
		startPoint: 	433@471
		trail: 	{(439@475)}


MouseMoveEvent>>sentTo:
	Receiver: [433@471 439@475 mouseEnter 2704657 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(243793920)
	Receiver's instance variables: 
		timeStamp: 	2704657
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	439@475
		handler: 	nil
		wasHandled: 	false
		startPoint: 	433@471
		trail: 	{(439@475)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(243793920)
	Arguments and temporary variables: 
		anEvent: 	[433@471 439@475 mouseEnter 2704657 nil]
	Receiver's instance variables: 
		bounds: 	350@429 corner: 550@477
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	350@429 corner: 550@477
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.714)
		extension: 	a MorphExtension (259784704) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.5 g: 0.5 b: 0.5 alpha: 0.714)
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	550@429
		lastActivity: 	2700202


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[433@471 439@475 mouseEnter 2704657 nil]
		originalEvent: 	[433@471 439@475 mouseMove 2704657 nil]
		aMorph: 	an OMenuMorph(243793920)
		transformedEvent: 	[433@471 439@475 mouseEnter 2704657 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[433@471 439@475 mouseEnter 2704657 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[433@471 439@475 mouseMove 2704657 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[433@471 439@475 mouseEnter 2704657 nil]
		aLeftMorph: 	an OMenuMorph(243793920)
		anEvent: 	[433@471 439@475 mouseMove 2704657 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(243793920)
		asMouseEnterEvent: 	[433@471 439@475 mouseMove 2704657 nil]
		anEnteredMorph: 	[433@471 439@475 mouseEnter 2704657 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(243793920))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(243793920))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[433@471 439@475 mouseMove 2704657 nil]
		asMouseEnterEvent: 	[433@471 439@475 mouseEnter 2704657 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[433@471 439@475 mouseMove 2704657 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(1022623744) an OBGroupingMorp...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[433@471 439@475 mouseMove 2704657 nil]
		evt: 	[433@471 439@475 mouseMove 2704657 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(816316416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[433@471 439@475 mouseMove 2704657 nil]
		evtBuf: 	#(1 2704657 439 475 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	470@487 corner: 486@503
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(816316416)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[439@475 470@487 mouseMove 2704673 nil]
		targetOffset: 	47@4
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 2704673 459 483 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1362@566
		canvas: 	a FormCanvas on: DisplayScreen(1362x566x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(243793920))(an OMenuMorp...etc...
		lastStepTime: 	2704528
		lastStepMessage: 	nil
		lastCycleTime: 	2704690
		alarms: 	a Heap()
		lastAlarmTime: 	2704528
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1362@566
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(114819072) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
22 June 2012 9:36:16 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(823656448)
	Arguments and temporary variables: 
		anEvent: 	[183@518 189@515 mouseEnter 277424 nil]
	Receiver's instance variables: 
		bounds: 	45@469 corner: 245@517
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	45@469 corner: 245@517
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (839647232) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	245@469
		lastActivity: 	276126


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [183@518 189@515 mouseEnter 277424 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(823656448)
	Receiver's instance variables: 
		timeStamp: 	277424
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	189@515
		handler: 	nil
		wasHandled: 	false
		startPoint: 	183@518
		trail: 	{(186@517). (189@515)}


MouseMoveEvent>>sentTo:
	Receiver: [183@518 189@515 mouseEnter 277424 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(823656448)
	Receiver's instance variables: 
		timeStamp: 	277424
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	189@515
		handler: 	nil
		wasHandled: 	false
		startPoint: 	183@518
		trail: 	{(186@517). (189@515)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(823656448)
	Arguments and temporary variables: 
		anEvent: 	[183@518 189@515 mouseEnter 277424 nil]
	Receiver's instance variables: 
		bounds: 	45@469 corner: 245@517
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	45@469 corner: 245@517
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (839647232) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	245@469
		lastActivity: 	276126


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[183@518 189@515 mouseEnter 277424 nil]
		originalEvent: 	[183@518 189@515 mouseMove 277424 nil]
		aMorph: 	an OMenuMorph(823656448)
		transformedEvent: 	[183@518 189@515 mouseEnter 277424 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[183@518 189@515 mouseEnter 277424 nil]
		aLeftMorph: 	an OMenuMorph(823656448)
		anEvent: 	[183@518 189@515 mouseMove 277424 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[183@518 189@515 mouseEnter 277424 nil]
		aLeftMorph: 	an OMenuMorph(823656448)
		anEvent: 	[183@518 189@515 mouseMove 277424 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(823656448)
		asMouseEnterEvent: 	[183@518 189@515 mouseMove 277424 nil]
		anEnteredMorph: 	[183@518 189@515 mouseEnter 277424 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(823656448))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(823656448))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[183@518 189@515 mouseMove 277424 nil]
		asMouseEnterEvent: 	[183@518 189@515 mouseEnter 277424 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[183@518 189@515 mouseMove 277424 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[183@518 189@515 mouseMove 277424 nil]
		evt: 	[183@518 189@515 mouseMove 277424 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	194@518 corner: 210@534
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(729022464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[191@515 194@518 mouseMove 277464 nil]
		targetOffset: 	23@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 277464 193 517 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[183@518 189@515 mouseMove 277424 nil]
		evtBuf: 	#(1 277424 186 517 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	194@518 corner: 210@534
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(729022464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[191@515 194@518 mouseMove 277464 nil]
		targetOffset: 	23@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 277464 193 517 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(823656448))(an OMenuMorp...etc...
		lastStepTime: 	277420
		lastStepMessage: 	nil
		lastCycleTime: 	277480
		alarms: 	a Heap()
		lastAlarmTime: 	277420
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(823656448))(an OMenuMorp...etc...
		lastStepTime: 	277420
		lastStepMessage: 	nil
		lastCycleTime: 	277480
		alarms: 	a Heap()
		lastAlarmTime: 	277420
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(823656448))(an OMenuMorp...etc...
		lastStepTime: 	277420
		lastStepMessage: 	nil
		lastCycleTime: 	277480
		alarms: 	a Heap()
		lastAlarmTime: 	277420
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(823656448))(an OMenuMorp...etc...
		lastStepTime: 	277420
		lastStepMessage: 	nil
		lastCycleTime: 	277480
		alarms: 	a Heap()
		lastAlarmTime: 	277420
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(340525056) an OM...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
22 June 2012 9:36:17 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(823656448)
	Arguments and temporary variables: 
		anEvent: 	[189@515 191@515 mouseEnter 277444 nil]
	Receiver's instance variables: 
		bounds: 	45@469 corner: 245@517
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	45@469 corner: 245@517
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (839647232) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	245@469
		lastActivity: 	276126


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [189@515 191@515 mouseEnter 277444 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(823656448)
	Receiver's instance variables: 
		timeStamp: 	277444
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	191@515
		handler: 	nil
		wasHandled: 	false
		startPoint: 	189@515
		trail: 	{(190@515). (191@515)}


MouseMoveEvent>>sentTo:
	Receiver: [189@515 191@515 mouseEnter 277444 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(823656448)
	Receiver's instance variables: 
		timeStamp: 	277444
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	191@515
		handler: 	nil
		wasHandled: 	false
		startPoint: 	189@515
		trail: 	{(190@515). (191@515)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(823656448)
	Arguments and temporary variables: 
		anEvent: 	[189@515 191@515 mouseEnter 277444 nil]
	Receiver's instance variables: 
		bounds: 	45@469 corner: 245@517
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	45@469 corner: 245@517
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (839647232) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	245@469
		lastActivity: 	276126


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[189@515 191@515 mouseEnter 277444 nil]
		originalEvent: 	[189@515 191@515 mouseMove 277444 nil]
		aMorph: 	an OMenuMorph(823656448)
		transformedEvent: 	[189@515 191@515 mouseEnter 277444 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[189@515 191@515 mouseEnter 277444 nil]
		aLeftMorph: 	an OMenuMorph(823656448)
		anEvent: 	[189@515 191@515 mouseMove 277444 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[189@515 191@515 mouseEnter 277444 nil]
		aLeftMorph: 	an OMenuMorph(823656448)
		anEvent: 	[189@515 191@515 mouseMove 277444 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(823656448)
		asMouseEnterEvent: 	[189@515 191@515 mouseMove 277444 nil]
		anEnteredMorph: 	[189@515 191@515 mouseEnter 277444 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(823656448))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(823656448))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[189@515 191@515 mouseMove 277444 nil]
		asMouseEnterEvent: 	[189@515 191@515 mouseEnter 277444 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[189@515 191@515 mouseMove 277444 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBTextMorph(928251904) a TransformMorph(1069547520...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[189@515 191@515 mouseMove 277444 nil]
		evt: 	[189@515 191@515 mouseMove 277444 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	194@518 corner: 210@534
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(702021632)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[191@515 194@518 mouseMove 277464 nil]
		targetOffset: 	23@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 277464 193 517 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[189@515 191@515 mouseMove 277444 nil]
		evtBuf: 	#(1 277444 190 515 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	194@518 corner: 210@534
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(702021632)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[191@515 194@518 mouseMove 277464 nil]
		targetOffset: 	23@26
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 277464 193 517 0 0 0 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(823656448))(an OMenuMorp...etc...
		lastStepTime: 	277420
		lastStepMessage: 	nil
		lastCycleTime: 	277480
		alarms: 	a Heap()
		lastAlarmTime: 	277420
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(823656448))(an OMenuMorp...etc...
		lastStepTime: 	277420
		lastStepMessage: 	nil
		lastCycleTime: 	277480
		alarms: 	a Heap()
		lastAlarmTime: 	277420
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(823656448))(an OMenuMorp...etc...
		lastStepTime: 	277420
		lastStepMessage: 	nil
		lastCycleTime: 	277480
		alarms: 	a Heap()
		lastAlarmTime: 	277420
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OMenuMorph(823656448))(an OMenuMorp...etc...
		lastStepTime: 	277420
		lastStepMessage: 	nil
		lastCycleTime: 	277480
		alarms: 	a Heap()
		lastAlarmTime: 	277420
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(389808128) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: WebHMIElement>>createElement:
23 June 2012 1:50:54 am

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-IgorStasenko.123]
Image: Pharo1.3 [Latest update: #13315]

WebHMIElement(Object)>>doesNotUnderstand: #createElement:
	Receiver: a WebHMIElement
	Arguments and temporary variables: 
		aMessage: 	createElement: 'ffd'
		exception: 	MessageNotUnderstood: WebHMIElement>>createElement:
		resumeValue: 	nil
	Receiver's instance variables: 
		state: 	nil
		elName: 	nil
		elType: 	nil
		widget: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream '(WebHMIElement Add: (WebHMIElement new createE...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(104595456)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ WebHMIElement Add: (WebHMIElement new createElement: 'ffd';...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(636223488)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream '(WebHMIElement Add: (WebHMIElement new createE...etc...
		requestor: 	a TextMorphForEditView(104595456)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(104595456)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 495670) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement Add: (WebHMIElement new createElement:  ''ffd'...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '(WebHMIElement Add: (WebHMIElement new createElement:  ''f...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 495670) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement Add: (WebHMIElement new createElement:  ''ffd'...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 495670) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement Add: (WebHMIElement new createElement:  ''ffd'...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 495670) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement Add: (WebHMIElement new createElement:  ''ffd'...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(104595456)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(104595456)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 495670) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement Add: (WebHMIElement new createElement:  ''ffd'...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(94896128)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 495670) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement Add: (WebHMIElement new createElement:  ''ffd'...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 495670) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement Add: (WebHMIElement new createElement:  ''ffd'...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(104595456)
	Receiver's instance variables: 
		timeStamp: 	495000
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	260@86
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	100


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 495670) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement Add: (WebHMIElement new createElement:  ''ffd'...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(104595456)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 667@18
		owner: 	a TransformMorph(148111360)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 667@18
		color: 	Color black
		extension: 	a MorphExtension (184811520) [other:  (blinkStart -> 495670) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '(WebHMIElement Add: (WebHMIElement new createElement:  ''ffd'...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(94896128)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(104595456)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	944@120 corner: 960@136
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(445120512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[944@121 944@120 mouseMove 494431 nil]
		targetOffset: 	168@69
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 494431 944 120 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(72876032) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@744
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(72876032) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(104595456)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	944@120 corner: 960@136
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(445120512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[944@121 944@120 mouseMove 494431 nil]
		targetOffset: 	168@69
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 494431 944 120 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(104595456)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	944@120 corner: 960@136
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(445120512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[944@121 944@120 mouseMove 494431 nil]
		targetOffset: 	168@69
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 494431 944 120 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	944@120 corner: 960@136
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(445120512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[944@121 944@120 mouseMove 494431 nil]
		targetOffset: 	168@69
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 494431 944 120 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	944@120 corner: 960@136
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(445120512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[944@121 944@120 mouseMove 494431 nil]
		targetOffset: 	168@69
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 494431 944 120 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 495000 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	944@120 corner: 960@136
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(445120512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[944@121 944@120 mouseMove 494431 nil]
		targetOffset: 	168@69
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 494431 944 120 0 0 0 1)
		lastKeyScanCode: 	100
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1366@744
		canvas: 	a FormCanvas on: DisplayScreen(1366x744x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(72876032))(a PreDebug...etc...
		lastStepTime: 	495004
		lastStepMessage: 	nil
		lastCycleTime: 	495048
		alarms: 	a Heap()
		lastAlarmTime: 	495004
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
WebHMIElement(Object)>>doesNotUnderstand: #createElement:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

